#
#
# DO NOT EDIT THIS FILE, IT'S AUTOGENERATED FROM XS MODULES AND WILL BE UPDATED AUTOMATICALLY
#
#
package B {
sub address;
sub amagic_generation;
sub begin_av;
sub cast_I32;
sub cchar;
sub check_av;
sub comppadlist;
sub cstring;
sub curstash;
sub defstash;
sub diehook;
sub dowarn;
sub end_av;
sub formfeed;
sub hash;
sub inc_gv;
sub init_av;
sub main_cv;
sub main_root;
sub main_start;
sub minus_c;
sub opnumber;
sub perlstring;
sub ppname;
sub regex_padav;
sub save_BEGINs;
sub sub_generation;
sub sv_no;
sub sv_undef;
sub sv_yes;
sub svref_2object;
sub threadsv_names;
sub unitcheck_av;
sub walkoptree;
sub walkoptree_debug;
sub warnhook;
}
package B::AV {
sub ARRAY;
sub ARRAYelt;
sub FILL;
sub MAX;
}
package B::BINOP {
sub last;
}
package B::BM {
sub PREVIOUS;
sub RARE;
sub TABLE;
sub USEFUL;
}
package B::COP {
sub arybase;
sub cop_seq;
sub file;
sub filegv;
sub hints;
sub hints_hash;
sub io;
sub label;
sub line;
sub stash;
sub stashlen;
sub stashpv;
sub warnings;
}
package B::CV {
sub CONST;
sub CvFLAGS;
sub DEPTH;
sub FILE;
sub GV;
sub OUTSIDE;
sub OUTSIDE_SEQ;
sub PADLIST;
sub ROOT;
sub START;
sub STASH;
sub XSUB;
sub XSUBANY;
sub const_sv;
}
package B::Deparse {
sub main_cv;
sub main_root;
sub main_start;
sub opnumber;
sub perlstring;
sub svref_2object;
}
package B::FM {
sub LINES;
}
package B::GV {
sub AV;
sub CV;
sub CVGEN;
sub EGV;
sub FILE;
sub FILEGV;
sub FORM;
sub GP;
sub GvFLAGS;
sub GvREFCNT;
sub HV;
sub IO;
sub LINE;
sub NAME;
sub STASH;
sub SV;
sub isGV_with_GP;
sub is_empty;
}
package B::HE {
sub HASH;
sub SVKEY_force;
sub VAL;
}
package B::HV {
sub ARRAY;
sub FILL;
sub KEYS;
sub MAX;
sub NAME;
sub RITER;
}
package B::IO {
sub BOTTOM_GV;
sub BOTTOM_NAME;
sub FMT_GV;
sub FMT_NAME;
sub IoFLAGS;
sub IoTYPE;
sub IsSTD;
sub LINES;
sub LINES_LEFT;
sub PAGE;
sub PAGE_LEN;
sub TOP_GV;
sub TOP_NAME;
}
package B::IV {
sub IV;
sub IVX;
sub RV;
sub UVX;
sub needs64bits;
sub packiv;
}
package B::LISTOP {
sub children;
}
package B::LOGOP {
sub other;
}
package B::LOOP {
sub lastop;
sub nextop;
sub redoop;
}
package B::MAGIC {
sub FLAGS;
sub LENGTH;
sub MOREMAGIC;
sub OBJ;
sub PRIVATE;
sub PTR;
sub REGEX;
sub TYPE;
sub precomp;
}
package B::NV {
sub COP_SEQ_RANGE_HIGH;
sub COP_SEQ_RANGE_LOW;
sub NV;
sub NVX;
sub PARENT_FAKELEX_FLAGS;
sub PARENT_PAD_INDEX;
}
package B::OP {
sub desc;
sub flags;
sub name;
sub next;
sub oplist;
sub opt;
sub ppaddr;
sub private;
sub sibling;
sub size;
sub spare;
sub targ;
sub type;
}
package B::PADOP {
sub gv;
sub padix;
sub sv;
}
package B::PMOP {
sub pmflags;
sub pmoffset;
sub pmreplroot;
sub pmreplstart;
sub pmstashpv;
sub precomp;
sub reflags;
}
package B::PV {
sub CUR;
sub LEN;
sub PV;
sub PVBM;
sub PVX;
sub RV;
sub as_string;
}
package B::PVLV {
sub TARG;
sub TARGLEN;
sub TARGOFF;
sub TYPE;
}
package B::PVMG {
sub MAGIC;
sub SvSTASH;
}
package B::PVOP {
sub pv;
}
package B::REGEXP {
sub REGEX;
sub precomp;
}
package B::RHE {
sub HASH;
}
package B::SV {
sub FLAGS;
sub MAGICAL;
sub POK;
sub REFCNT;
sub ROK;
sub SvTYPE;
sub object_2svref;
}
package B::SVOP {
sub gv;
sub sv;
}
package B::UNOP {
sub first;
}
package BerkeleyDB {
sub _db_remove;
sub _db_rename;
sub _db_verify;
sub constant;
sub db_value_set;
sub db_version;
sub has_heap;
}
package BerkeleyDB::Btree {
sub _db_open_btree;
sub db_stat;
}
package BerkeleyDB::Common {
sub ArrayOffset;
sub _DESTROY;
sub _Txn;
sub __db_write_cursor;
sub _db_cursor;
sub _db_join;
sub associate;
sub associate_foreign;
sub byteswapped;
sub cds_enabled;
sub compact;
sub db_close;
sub db_create_sequence;
sub db_del;
sub db_exists;
sub db_fd;
sub db_get;
sub db_key_range;
sub db_pget;
sub db_put;
sub db_sync;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub partial_clear;
sub partial_set;
sub stat_print;
sub status;
sub truncate;
sub type;
}
package BerkeleyDB::Cursor {
sub _DESTROY;
sub _c_close;
sub _c_dup;
sub c_count;
sub c_del;
sub c_get;
sub c_pget;
sub c_put;
sub status;
}
package BerkeleyDB::Env {
sub DB_ENV;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _DESTROY;
sub _TxnMgr;
sub _db_appinit;
sub _txn_begin;
sub cds_enabled;
sub close;
sub create;
sub db_appexit;
sub errPrefix;
sub failchk;
sub get_shm_key;
sub get_timeout;
sub lock_detect;
sub lock_stat_print;
sub log_archive;
sub log_get_config;
sub log_set_config;
sub lsn_reset;
sub mutex_stat_print;
sub open;
sub printEnv;
sub set_data_dir;
sub set_encrypt;
sub set_flags;
sub set_isalive;
sub set_lg_bsize;
sub set_lg_dir;
sub set_lg_max;
sub set_mutexlocks;
sub set_timeout;
sub set_tmp_dir;
sub set_verbose;
sub stat_print;
sub status;
sub txn_checkpoint;
sub txn_stat;
sub txn_stat_print;
}
package BerkeleyDB::Hash {
sub _db_open_hash;
sub db_stat;
}
package BerkeleyDB::Heap {
sub _db_open_heap;
}
package BerkeleyDB::Queue {
sub FETCHSIZE;
sub _db_open_queue;
sub db_stat;
}
package BerkeleyDB::Recno {
sub FETCHSIZE;
sub _db_open_recno;
sub db_stat;
}
package BerkeleyDB::Sequence {
sub DESTROY;
sub close;
sub get;
sub get_cachesize;
sub get_flags;
sub get_key;
sub initial_value;
sub open;
sub remove;
sub set_cachesize;
sub set_flags;
sub set_range;
sub stat;
}
package BerkeleyDB::Term {
sub close_everything;
sub safeCroak;
}
package BerkeleyDB::Txn {
sub _DESTROY;
sub _txn_abort;
sub _txn_commit;
sub _txn_discard;
sub get_tx_max;
sub set_timeout;
sub set_tx_max;
sub status;
sub txn_id;
sub txn_prepare;
sub txn_unlink;
}
package BerkeleyDB::TxnMgr {
sub _DESTROY;
sub _txn_begin;
sub status;
sub txn_checkpoint;
sub txn_close;
sub txn_open;
sub txn_stat;
}
package BerkeleyDB::Unknown {
sub _db_open_unknown;
}
package BerkeleyDB::_tiedArray {
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub length;
}
package BerkeleyDB::_tiedHash {
sub FIRSTKEY;
sub NEXTKEY;
}
package Carp {
sub downgrade;
sub is_utf8;
}
package Class::Load {
sub is_class_loaded;
}
package Class::Load::XS {
sub is_class_loaded;
}
package Class::MOP {
sub blessed($) ;
sub check_package_cache_flag($) ;
sub get_code_info($) ;
sub isweak($) ;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Attribute {
sub associated_class;
sub associated_methods;
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Class {
sub all(&@) ;
sub blessed($) ;
sub constructor_class;
sub constructor_name;
sub destructor_class;
sub immutable_trait;
sub instance_metaclass;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub weaken($) ;
}
package Class::MOP::Class::Immutable::Trait {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Instance {
sub associated_metaclass;
sub blessed($) ;
sub isweak($) ;
sub slot_hash;
sub slots;
sub weaken($) ;
}
package Class::MOP::Method {
sub blessed($) ;
sub body;
sub is_stub;
sub name;
sub package_name;
sub reftype($) ;
sub weaken($) ;
}
package Class::MOP::Method::Accessor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Constructor {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Generated {
sub definition_context;
sub is_inline;
}
package Class::MOP::Method::Inlined {
sub _expected_method_class;
sub blessed($) ;
sub looks_like_number($) ;
sub refaddr($) ;
sub weaken($) ;
}
package Class::MOP::Method::Meta {
sub blessed($) ;
sub weaken($) ;
}
package Class::MOP::Method::Overload {
sub operator;
}
package Class::MOP::Method::Wrapped {
sub blessed($) ;
}
package Class::MOP::Mixin {
sub blessed($) ;
}
package Class::MOP::Mixin::AttributeCore {
sub accessor;
sub blessed($) ;
sub builder;
sub clearer;
sub definition_context;
sub init_arg;
sub initializer;
sub insertion_order;
sub name;
sub predicate;
sub reader;
sub writer;
}
package Class::MOP::Mixin::HasAttributes {
sub _attribute_map;
sub attribute_metaclass;
sub blessed($) ;
}
package Class::MOP::Mixin::HasMethods {
sub _method_map;
sub blessed($) ;
sub method_metaclass;
sub subname;
sub wrapped_method_metaclass;
}
package Class::MOP::Module {
sub blessed($) ;
}
package Class::MOP::Object {
sub blessed($) ;
}
package Class::MOP::Package {
sub blessed($) ;
sub name;
sub reftype($) ;
sub weaken($) ;
}
package Clone {
sub clone($;$) ;
}
package Compress::Bzip2 {
sub DESTROY($) ;
sub FD_CLOEXEC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISVTX() ;
sub S_ISWHT;
sub bz_seterror($$) ;
sub bzclearerr($) ;
sub bzclose($;$) ;
sub bzdeflate($$) ;
sub bzdeflateInit(@) ;
sub bzeof($) ;
sub bzerror($) ;
sub bzflush($;$) ;
sub bzinflate($$) ;
sub bzinflateInit(@) ;
sub bzlibversion() ;
sub bzopen($$;$) ;
sub bzread($$;$) ;
sub bzreadline($$;$) ;
sub bzsetparams($$;$) ;
sub bzwrite($$;$) ;
sub compress($;$) ;
sub compress_init(@) ;
sub constant;
sub decompress($) ;
sub decompress_init(@) ;
sub is_read($) ;
sub is_stream($) ;
sub is_write($) ;
sub memBunzip($) ;
sub memBzip($;$) ;
sub new(@) ;
sub prefix($) ;
sub total_in($) ;
sub total_out($) ;
}
package Compress::Raw::Bunzip2 {
sub DESTROY;
sub DispStream;
sub bzinflate;
sub compressedBytes;
sub inflateCount;
sub new;
sub status;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Bzip2 {
sub DESTROY;
sub DispStream;
sub bzclose;
sub bzdeflate;
sub bzflush;
sub bzlibversion;
sub compressedBytes;
sub constant;
sub new;
sub total_in_lo32;
sub total_out_lo32;
sub uncompressedBytes;
}
package Compress::Raw::Lzma {
sub LZMA_BACKWARD_SIZE_MAX;
sub LZMA_FILTER_LZMA1;
sub blessed($) ;
sub constant;
sub lzma_alone_decoder;
sub lzma_alone_encoder;
sub lzma_auto_decoder;
sub lzma_check_is_supported;
sub lzma_check_size;
sub lzma_easy_decoder_memusage;
sub lzma_easy_encoder;
sub lzma_easy_encoder_memusage;
sub lzma_filter_decoder_is_supported;
sub lzma_filter_encoder_is_supported;
sub lzma_mf_is_supported;
sub lzma_mode_is_supported;
sub lzma_raw_decoder;
sub lzma_raw_encoder;
sub lzma_stream_buffer_bound;
sub lzma_stream_decoder;
sub lzma_stream_encoder;
sub lzma_version_number;
sub lzma_version_string;
}
package Compress::Raw::Lzma::Decoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Encoder {
sub DESTROY;
sub code;
sub compressedBytes;
sub flush;
sub uncompressedBytes;
}
package Compress::Raw::Lzma::Options {
sub DESTROY;
sub lzma_lzma_preset;
sub new;
}
package Compress::Raw::Zlib {
sub ZLIB_VERNUM;
sub _deflateInit;
sub _inflateInit;
sub _inflateScanInit;
sub adler32;
sub adler32_combine;
sub constant;
sub crc32;
sub crc32_combine;
sub zlibCompileFlags;
sub zlib_version;
}
package Compress::Raw::Zlib::deflateStream {
sub DESTROY;
sub DispStream;
sub _deflateParams;
sub adler32;
sub compressedBytes;
sub crc32;
sub deflate;
sub deflateReset;
sub deflateTune;
sub dict_adler;
sub flush;
sub get_Bufsize;
sub get_Level;
sub get_Strategy;
sub msg;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateScanStream {
sub DESTROY;
sub DispStream;
sub _createDeflateStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub getEndOffset;
sub getLastBlockOffset;
sub getLastBufferOffset;
sub inflateCount;
sub inflateReset;
sub resetLastBlockByte;
sub scan;
sub status;
sub uncompressedBytes;
}
package Compress::Raw::Zlib::inflateStream {
sub DESTROY;
sub DispStream;
sub adler32;
sub compressedBytes;
sub crc32;
sub dict_adler;
sub get_Bufsize;
sub inflate;
sub inflateCount;
sub inflateReset;
sub inflateSync;
sub msg;
sub set_Append;
sub status;
sub total_in;
sub total_out;
sub uncompressedBytes;
}
package Compress::unLZMA {
sub uncompressdata;
sub uncompressfile;
}
package Config {
sub AUTOLOAD;
}
package Crypt::Blowfish {
sub crypt;
sub init;
}
package Crypt::DES {
sub crypt;
sub expand_key;
}
package Crypt::IDEA {
sub crypt;
sub expand_key;
sub invert_key;
}
package Crypt::RIPEMD160 {
sub DESTROY;
sub add;
sub digest;
sub new;
sub reset;
}
package Crypt::Rijndael {
sub DESTROY($) ;
sub decrypt($$) ;
sub encrypt($$) ;
sub new($$;$) ;
sub set_iv($$) ;
}
package Crypt::SSLeay::CTX {
sub check_private_key;
sub free;
sub new;
sub set_cipher_list;
sub set_verify;
sub use_PrivateKey_file;
sub use_certificate_file;
sub use_pkcs12_file;
}
package Crypt::SSLeay::Conn {
sub accept;
sub connect;
sub free;
sub get_cipher;
sub get_peer_certificate;
sub get_shared_ciphers;
sub get_verify_result;
sub new;
sub read;
sub set_fd;
sub set_tlsext_host_name;
sub write;
}
package Crypt::SSLeay::Err {
sub get_error_string;
}
package Crypt::SSLeay::X509 {
sub free;
sub get_notAfterString;
sub get_notBeforeString;
sub issuer_name;
sub subject_name;
}
package Crypt::Twofish {
sub DESTROY;
sub crypt;
sub setup;
}
package Cwd {
sub getdcwd(;@) ;
}
package DBD::ODBC::db {
sub DESTROY;
sub FETCH;
sub GetFunctions;
sub STORE;
sub _ExecDirect;
sub _GetForeignKeys;
sub _GetInfo;
sub _GetPrimaryKeys;
sub _GetSpecialColumns;
sub _GetStatistics;
sub _GetTypeInfo;
sub _columns;
sub _login;
sub commit;
sub disconnect;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
}
package DBD::ODBC::dr {
sub data_sources($;$) ;
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::ODBC::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _Cancel;
sub _ColAttributes;
sub _prepare;
sub _primary_keys;
sub _statistics;
sub _tables;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub odbc_execute_for_fetch;
sub odbc_getdiagfield;
sub odbc_getdiagrec;
sub odbc_lob_read($$$$;$) ;
sub odbc_rows;
sub rows;
}
package DBD::Pg {
sub PG_ABSTIME() ;
sub PG_ABSTIMEARRAY() ;
sub PG_ACLITEM() ;
sub PG_ACLITEMARRAY() ;
sub PG_ANY() ;
sub PG_ANYARRAY() ;
sub PG_ANYELEMENT() ;
sub PG_ANYENUM() ;
sub PG_ANYNONARRAY() ;
sub PG_ASYNC() ;
sub PG_BIT() ;
sub PG_BITARRAY() ;
sub PG_BOOL() ;
sub PG_BOOLARRAY() ;
sub PG_BOX() ;
sub PG_BOXARRAY() ;
sub PG_BPCHAR() ;
sub PG_BPCHARARRAY() ;
sub PG_BYTEA() ;
sub PG_BYTEAARRAY() ;
sub PG_CHAR() ;
sub PG_CHARARRAY() ;
sub PG_CID() ;
sub PG_CIDARRAY() ;
sub PG_CIDR() ;
sub PG_CIDRARRAY() ;
sub PG_CIRCLE() ;
sub PG_CIRCLEARRAY() ;
sub PG_CSTRING() ;
sub PG_CSTRINGARRAY() ;
sub PG_DATE() ;
sub PG_DATEARRAY() ;
sub PG_FDW_HANDLER() ;
sub PG_FLOAT4() ;
sub PG_FLOAT4ARRAY() ;
sub PG_FLOAT8() ;
sub PG_FLOAT8ARRAY() ;
sub PG_GTSVECTOR() ;
sub PG_GTSVECTORARRAY() ;
sub PG_INET() ;
sub PG_INETARRAY() ;
sub PG_INT2() ;
sub PG_INT2ARRAY() ;
sub PG_INT2VECTOR() ;
sub PG_INT2VECTORARRAY() ;
sub PG_INT4() ;
sub PG_INT4ARRAY() ;
sub PG_INT8() ;
sub PG_INT8ARRAY() ;
sub PG_INTERNAL() ;
sub PG_INTERVAL() ;
sub PG_INTERVALARRAY() ;
sub PG_LANGUAGE_HANDLER() ;
sub PG_LINE() ;
sub PG_LINEARRAY() ;
sub PG_LSEG() ;
sub PG_LSEGARRAY() ;
sub PG_MACADDR() ;
sub PG_MACADDRARRAY() ;
sub PG_MONEY() ;
sub PG_MONEYARRAY() ;
sub PG_NAME() ;
sub PG_NAMEARRAY() ;
sub PG_NUMERIC() ;
sub PG_NUMERICARRAY() ;
sub PG_OID() ;
sub PG_OIDARRAY() ;
sub PG_OIDVECTOR() ;
sub PG_OIDVECTORARRAY() ;
sub PG_OLDQUERY_CANCEL() ;
sub PG_OLDQUERY_WAIT() ;
sub PG_OPAQUE() ;
sub PG_PATH() ;
sub PG_PATHARRAY() ;
sub PG_PG_ATTRIBUTE() ;
sub PG_PG_CLASS() ;
sub PG_PG_NODE_TREE() ;
sub PG_PG_PROC() ;
sub PG_PG_TYPE() ;
sub PG_POINT() ;
sub PG_POINTARRAY() ;
sub PG_POLYGON() ;
sub PG_POLYGONARRAY() ;
sub PG_RECORD() ;
sub PG_RECORDARRAY() ;
sub PG_REFCURSOR() ;
sub PG_REFCURSORARRAY() ;
sub PG_REGCLASS() ;
sub PG_REGCLASSARRAY() ;
sub PG_REGCONFIG() ;
sub PG_REGCONFIGARRAY() ;
sub PG_REGDICTIONARY() ;
sub PG_REGDICTIONARYARRAY() ;
sub PG_REGOPER() ;
sub PG_REGOPERARRAY() ;
sub PG_REGOPERATOR() ;
sub PG_REGOPERATORARRAY() ;
sub PG_REGPROC() ;
sub PG_REGPROCARRAY() ;
sub PG_REGPROCEDURE() ;
sub PG_REGPROCEDUREARRAY() ;
sub PG_REGTYPE() ;
sub PG_REGTYPEARRAY() ;
sub PG_RELTIME() ;
sub PG_RELTIMEARRAY() ;
sub PG_SMGR() ;
sub PG_TEXT() ;
sub PG_TEXTARRAY() ;
sub PG_TID() ;
sub PG_TIDARRAY() ;
sub PG_TIME() ;
sub PG_TIMEARRAY() ;
sub PG_TIMESTAMP() ;
sub PG_TIMESTAMPARRAY() ;
sub PG_TIMESTAMPTZ() ;
sub PG_TIMESTAMPTZARRAY() ;
sub PG_TIMETZ() ;
sub PG_TIMETZARRAY() ;
sub PG_TINTERVAL() ;
sub PG_TINTERVALARRAY() ;
sub PG_TRIGGER() ;
sub PG_TSQUERY() ;
sub PG_TSQUERYARRAY() ;
sub PG_TSVECTOR() ;
sub PG_TSVECTORARRAY() ;
sub PG_TXID_SNAPSHOT() ;
sub PG_TXID_SNAPSHOTARRAY() ;
sub PG_UNKNOWN() ;
sub PG_UUID() ;
sub PG_UUIDARRAY() ;
sub PG_VARBIT() ;
sub PG_VARBITARRAY() ;
sub PG_VARCHAR() ;
sub PG_VARCHARARRAY() ;
sub PG_VOID() ;
sub PG_XID() ;
sub PG_XIDARRAY() ;
sub PG_XML() ;
sub PG_XMLARRAY() ;
sub constant() ;
}
package DBD::Pg::db {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _login;
sub _pg_type_info;
sub _ping;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub endcopy;
sub getfd;
sub getline;
sub lo_close;
sub lo_creat;
sub lo_export;
sub lo_import;
sub lo_lseek;
sub lo_open;
sub lo_read;
sub lo_tell;
sub lo_unlink;
sub lo_write;
sub pg_cancel;
sub pg_endcopy;
sub pg_getcopydata;
sub pg_getcopydata_async;
sub pg_getline;
sub pg_lo_close;
sub pg_lo_creat;
sub pg_lo_export;
sub pg_lo_import;
sub pg_lo_import_with_oid;
sub pg_lo_lseek;
sub pg_lo_open;
sub pg_lo_read;
sub pg_lo_tell;
sub pg_lo_unlink;
sub pg_lo_write;
sub pg_notifies;
sub pg_putcopydata;
sub pg_putcopyend;
sub pg_putline;
sub pg_ready;
sub pg_release;
sub pg_result;
sub pg_rollback_to;
sub pg_savepoint;
sub pg_server_trace;
sub pg_server_untrace;
sub putline;
sub quote;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub state;
}
package DBD::Pg::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::Pg::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub cancel;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub pg_cancel;
sub pg_ready;
sub pg_result;
sub rows;
sub state;
}
package DBD::SQLite {
sub ALTER_TABLE() ;
sub ANALYZE() ;
sub ATTACH() ;
sub CREATE_INDEX() ;
sub CREATE_TABLE() ;
sub CREATE_TEMP_INDEX() ;
sub CREATE_TEMP_TABLE() ;
sub CREATE_TEMP_TRIGGER() ;
sub CREATE_TEMP_VIEW() ;
sub CREATE_TRIGGER() ;
sub CREATE_VIEW() ;
sub CREATE_VTABLE() ;
sub DELETE() ;
sub DENY() ;
sub DETACH() ;
sub DROP_INDEX() ;
sub DROP_TABLE() ;
sub DROP_TEMP_INDEX() ;
sub DROP_TEMP_TABLE() ;
sub DROP_TEMP_TRIGGER() ;
sub DROP_TEMP_VIEW() ;
sub DROP_TRIGGER() ;
sub DROP_VIEW() ;
sub DROP_VTABLE() ;
sub FUNCTION() ;
sub IGNORE() ;
sub INSERT() ;
sub OK() ;
sub PRAGMA() ;
sub READ() ;
sub REINDEX() ;
sub SAVEPOINT() ;
sub SELECT() ;
sub TRANSACTION() ;
sub UPDATE() ;
sub compile_options() ;
}
package DBD::SQLite::db {
sub DESTROY;
sub FETCH;
sub STORE;
sub _login;
sub backup_from_file;
sub backup_to_file;
sub busy_timeout;
sub collation_needed;
sub commit;
sub commit_hook;
sub create_aggregate;
sub create_collation;
sub create_function;
sub disconnect;
sub enable_load_extension;
sub last_insert_id;
sub last_insert_rowid;
sub profile;
sub progress_handler;
sub register_fts3_perl_tokenizer;
sub rollback;
sub rollback_hook;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub set_authorizer;
sub sqlite_backup_from_file;
sub sqlite_backup_to_file;
sub sqlite_busy_timeout;
sub sqlite_collation_needed;
sub sqlite_commit_hook;
sub sqlite_create_aggregate;
sub sqlite_create_collation;
sub sqlite_create_function;
sub sqlite_enable_load_extension;
sub sqlite_last_insert_rowid;
sub sqlite_profile;
sub sqlite_progress_handler;
sub sqlite_register_fts3_perl_tokenizer;
sub sqlite_rollback_hook;
sub sqlite_set_authorizer;
sub sqlite_trace;
sub sqlite_update_hook;
sub update_hook;
}
package DBD::SQLite::dr {
sub dbixs_revision;
sub discon_all_;
sub disconnect_all;
}
package DBD::SQLite::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _prepare;
sub bind_col;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub rows;
}
package DBD::_::common {
sub DESTROY;
sub FETCH;
sub STORE;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub private_data;
sub rows;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
}
package DBD::_::db {
sub connected;
sub preparse;
sub take_imp_data;
}
package DBD::_::dr {
sub dbixs_revision;
}
package DBD::_::st {
sub DESTROY;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub fetch;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub rows;
}
package DBD::_mem::common {
sub DESTROY;
}
package DBD::mysql {
sub constant;
}
package DBD::mysql::GetInfo {
sub dbd_mysql_get_info;
}
package DBD::mysql::db {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub DESTROY;
sub FETCH;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub STORE;
sub _ListDBs;
sub _async_check;
sub _login;
sub commit;
sub disconnect;
sub do($$;$@) ;
sub last_insert_id;
sub mysql_async_ready;
sub mysql_async_result;
sub mysql_fd;
sub ping($) ;
sub quote($$;$) ;
sub rollback;
sub selectall_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub type_info_all;
}
package DBD::mysql::dr {
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _ListDBs;
sub _admin_internal;
sub dbixs_revision;
}
package DBD::mysql::st {
sub DESTROY;
sub FETCH;
sub FETCH_attrib;
sub STORE;
sub _async_check;
sub _prepare;
sub bind_param;
sub bind_param_inout;
sub blob_read;
sub dataseek($$) ;
sub execute;
sub fetch;
sub fetchall_arrayref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub finish;
sub more_results;
sub mysql_async_ready;
sub mysql_async_result;
sub rows;
}
package DBI {
sub DBIf_TRACE_CON() ;
sub DBIf_TRACE_DBD() ;
sub DBIf_TRACE_ENC() ;
sub DBIf_TRACE_SQL() ;
sub DBIf_TRACE_TXN() ;
sub DBIpp_cm_XX() ;
sub DBIpp_cm_br() ;
sub DBIpp_cm_cs() ;
sub DBIpp_cm_dd() ;
sub DBIpp_cm_dw() ;
sub DBIpp_cm_hs() ;
sub DBIpp_ph_XX() ;
sub DBIpp_ph_cn() ;
sub DBIpp_ph_cs() ;
sub DBIpp_ph_qm() ;
sub DBIpp_ph_sp() ;
sub DBIpp_st_XX() ;
sub DBIpp_st_bs() ;
sub DBIpp_st_qq() ;
sub DBIstcf_DISCARD_STRING() ;
sub DBIstcf_STRICT() ;
sub SQL_ALL_TYPES() ;
sub SQL_ARRAY() ;
sub SQL_ARRAY_LOCATOR() ;
sub SQL_BIGINT() ;
sub SQL_BINARY() ;
sub SQL_BIT() ;
sub SQL_BLOB() ;
sub SQL_BLOB_LOCATOR() ;
sub SQL_BOOLEAN() ;
sub SQL_CHAR() ;
sub SQL_CLOB() ;
sub SQL_CLOB_LOCATOR() ;
sub SQL_CURSOR_DYNAMIC() ;
sub SQL_CURSOR_FORWARD_ONLY() ;
sub SQL_CURSOR_KEYSET_DRIVEN() ;
sub SQL_CURSOR_STATIC() ;
sub SQL_CURSOR_TYPE_DEFAULT() ;
sub SQL_DATE() ;
sub SQL_DATETIME() ;
sub SQL_DECIMAL() ;
sub SQL_DOUBLE() ;
sub SQL_FLOAT() ;
sub SQL_GUID() ;
sub SQL_INTEGER() ;
sub SQL_INTERVAL() ;
sub SQL_INTERVAL_DAY() ;
sub SQL_INTERVAL_DAY_TO_HOUR() ;
sub SQL_INTERVAL_DAY_TO_MINUTE() ;
sub SQL_INTERVAL_DAY_TO_SECOND() ;
sub SQL_INTERVAL_HOUR() ;
sub SQL_INTERVAL_HOUR_TO_MINUTE() ;
sub SQL_INTERVAL_HOUR_TO_SECOND() ;
sub SQL_INTERVAL_MINUTE() ;
sub SQL_INTERVAL_MINUTE_TO_SECOND() ;
sub SQL_INTERVAL_MONTH() ;
sub SQL_INTERVAL_SECOND() ;
sub SQL_INTERVAL_YEAR() ;
sub SQL_INTERVAL_YEAR_TO_MONTH() ;
sub SQL_LONGVARBINARY() ;
sub SQL_LONGVARCHAR() ;
sub SQL_MULTISET() ;
sub SQL_MULTISET_LOCATOR() ;
sub SQL_NUMERIC() ;
sub SQL_REAL() ;
sub SQL_REF() ;
sub SQL_ROW() ;
sub SQL_SMALLINT() ;
sub SQL_TIME() ;
sub SQL_TIMESTAMP() ;
sub SQL_TINYINT() ;
sub SQL_TYPE_DATE() ;
sub SQL_TYPE_TIME() ;
sub SQL_TYPE_TIMESTAMP() ;
sub SQL_TYPE_TIMESTAMP_WITH_TIMEZONE() ;
sub SQL_TYPE_TIME_WITH_TIMEZONE() ;
sub SQL_UDT() ;
sub SQL_UDT_LOCATOR() ;
sub SQL_UNKNOWN_TYPE() ;
sub SQL_VARBINARY() ;
sub SQL_VARCHAR() ;
sub SQL_WCHAR() ;
sub SQL_WLONGVARCHAR() ;
sub SQL_WVARCHAR() ;
sub _clone_dbis;
sub _concat_hash_sorted;
sub _dbi_state_lval;
sub _debug_dispatch;
sub _get_imp_data;
sub _handles;
sub _install_method;
sub _new_handle;
sub _setup_handle;
sub _svdump;
sub constant() ;
sub dbi_profile;
sub dbi_profile_merge;
sub dbi_profile_merge_nodes;
sub dbi_time;
sub dump_handle;
sub hash;
sub looks_like_number;
sub neat;
sub set_err;
sub sql_type_cast;
sub trace;
sub trace_msg;
}
package DBI::common {
sub CLEAR;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FETCH_many;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub can;
sub debug;
sub dump_handle;
sub err;
sub errstr;
sub func;
sub parse_trace_flag;
sub parse_trace_flags;
sub private_attribute_info;
sub private_data;
sub set_err;
sub state;
sub swap_inner_handle;
sub trace;
sub trace_msg;
sub visit_child_handles;
}
package DBI::db {
sub TIEHASH;
sub begin_work;
sub clone;
sub column_info;
sub commit;
sub connected;
sub data_sources;
sub disconnect;
sub do;
sub foreign_key_info;
sub get_info;
sub last_insert_id;
sub ping;
sub prepare;
sub prepare_cached;
sub preparse;
sub primary_key;
sub primary_key_info;
sub quote;
sub quote_identifier;
sub rollback;
sub rows;
sub selectall_arrayref;
sub selectall_hashref;
sub selectcol_arrayref;
sub selectrow_array;
sub selectrow_arrayref;
sub selectrow_hashref;
sub statistics_info;
sub table_info;
sub tables;
sub take_imp_data;
sub type_info;
sub type_info_all;
}
package DBI::dr {
sub TIEHASH;
sub connect;
sub connect_cached;
sub data_sources;
sub dbixs_revision;
sub default_user;
sub disconnect_all;
}
package DBI::st {
sub TIEHASH;
sub _get_fbav;
sub _set_fbav;
sub bind_col;
sub bind_columns;
sub bind_param;
sub bind_param_array;
sub bind_param_inout;
sub bind_param_inout_array;
sub blob_copy_to_file;
sub blob_read;
sub cancel;
sub dump_results;
sub execute;
sub execute_array;
sub execute_for_fetch;
sub fetch;
sub fetchall_arrayref;
sub fetchall_hashref;
sub fetchrow;
sub fetchrow_array;
sub fetchrow_arrayref;
sub fetchrow_hashref;
sub finish;
sub more_results;
sub rows;
}
package DBI::var {
sub FETCH;
}
package DB_File {
sub DELETE;
sub DESTROY;
sub DoTie_;
sub EXISTS;
sub FETCH;
sub FETCHSIZE;
sub FIRSTKEY;
sub NEXTKEY;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub POP;
sub PUSH;
sub SHIFT;
sub STORE;
sub UNSHIFT;
sub constant;
sub del;
sub fd;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub get;
sub length;
sub pop;
sub push;
sub put;
sub seq;
sub shift;
sub sync;
sub unshift;
}
package Data::Dumper {
sub Dumpxs($;$$) ;
sub _vstring($) ;
}
package DateTime {
sub _accumulated_leap_seconds($$) ;
sub _day_has_leap_second($$) ;
sub _day_length($$) ;
sub _is_leap_year($$) ;
sub _normalize_leap_seconds($$$) ;
sub _normalize_tai_seconds($$$) ;
sub _rd2ymd($$;$) ;
sub _seconds_as_components($$;$$) ;
sub _time_as_seconds($$$$) ;
sub _ymd2rd($$$$) ;
sub floor;
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::Duration {
sub validate(\@$) ;
}
package DateTime::Locale {
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::Locale::Base {
sub validate_pos(\@@) ;
}
package DateTime::TimeZone {
sub validate(\@$) ;
sub validate_pos(\@@) ;
}
package DateTime::TimeZone::Local {
sub is_class_loaded;
}
package DateTime::TimeZone::OffsetOnly {
sub validate(\@$) ;
}
package Devel::Declare {
sub clear_lex_stuff;
sub get_curstash_name;
sub get_in_declare;
sub get_lex_stuff;
sub get_linestr;
sub get_linestr_offset;
sub initialize;
sub set_in_declare;
sub set_linestr;
sub set_prototype(&$) ;
sub setup;
sub toke_move_past_token;
sub toke_scan_ident;
sub toke_scan_str;
sub toke_scan_word;
sub toke_skipspace;
}
package Devel::Peek {
sub CvGV;
sub DeadCode;
sub Dump;
sub DumpArray;
sub DumpProg;
sub SvREFCNT;
sub SvREFCNT_dec;
sub SvREFCNT_inc;
sub fill_mstats;
sub mstat;
sub mstats2hash($\%;$) ;
sub mstats_fillhash(\%;$) ;
sub runops_debug;
}
package Digest::MD2 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub md2;
sub md2_base64;
sub md2_hex;
sub new;
sub reset;
}
package Digest::MD5 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub md5;
sub md5_base64;
sub md5_hex;
sub new;
sub reset;
}
package Digest::SHA {
sub B64digest($) ;
sub FD_CLOEXEC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_NODNY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub Hexdigest($) ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub add($;@) ;
sub algorithm($) ;
sub b64digest($) ;
sub digest($) ;
sub hashsize($) ;
sub hexdigest($) ;
sub hmac_sha1(;@) ;
sub hmac_sha1_base64(;@) ;
sub hmac_sha1_hex(;@) ;
sub hmac_sha224(;@) ;
sub hmac_sha224_base64(;@) ;
sub hmac_sha224_hex(;@) ;
sub hmac_sha256(;@) ;
sub hmac_sha256_base64(;@) ;
sub hmac_sha256_hex(;@) ;
sub hmac_sha384(;@) ;
sub hmac_sha384_base64(;@) ;
sub hmac_sha384_hex(;@) ;
sub hmac_sha512(;@) ;
sub hmac_sha512224(;@) ;
sub hmac_sha512224_base64(;@) ;
sub hmac_sha512224_hex(;@) ;
sub hmac_sha512256(;@) ;
sub hmac_sha512256_base64(;@) ;
sub hmac_sha512256_hex(;@) ;
sub hmac_sha512_base64(;@) ;
sub hmac_sha512_hex(;@) ;
sub sha1(;@) ;
sub sha1_base64(;@) ;
sub sha1_hex(;@) ;
sub sha224(;@) ;
sub sha224_base64(;@) ;
sub sha224_hex(;@) ;
sub sha256(;@) ;
sub sha256_base64(;@) ;
sub sha256_hex(;@) ;
sub sha384(;@) ;
sub sha384_base64(;@) ;
sub sha384_hex(;@) ;
sub sha512(;@) ;
sub sha512224(;@) ;
sub sha512224_base64(;@) ;
sub sha512224_hex(;@) ;
sub sha512256(;@) ;
sub sha512256_base64(;@) ;
sub sha512256_hex(;@) ;
sub sha512_base64(;@) ;
sub sha512_hex(;@) ;
sub shaclose($) ;
sub shadump($$) ;
sub shadup($) ;
sub shaload($) ;
sub shaopen($) ;
sub sharewind($) ;
sub shawrite($$$) ;
}
package Digest::SHA1 {
sub DESTROY;
sub add;
sub addfile;
sub b64digest;
sub clone;
sub digest;
sub hexdigest;
sub new;
sub sha1;
sub sha1_base64;
sub sha1_hex;
sub sha1_transform;
}
package Digest::base {
sub add;
sub clone;
sub digest;
sub new;
}
package DynaLoader {
sub CLONE;
sub boot_DynaLoader;
sub dl_error;
sub dl_find_symbol;
sub dl_install_xsub;
sub dl_load_file;
sub dl_undef_symbols;
sub dl_unload_file;
}
package Encode {
sub DIE_ON_ERR() ;
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
sub HTMLCREF() ;
sub LEAVE_SRC() ;
sub PERLQQ() ;
sub RETURN_ON_ERR() ;
sub STOP_AT_PARTIAL() ;
sub WARN_ON_ERR() ;
sub XMLCREF() ;
sub _bytes_to_utf8($;@) ;
sub _utf8_off($) ;
sub _utf8_on($) ;
sub _utf8_to_bytes($;@) ;
sub is_utf8($;$) ;
}
package Encode::CN::HZ {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::JP::JIS7 {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::KR::2022_KR {
sub FB_CROAK() ;
sub FB_DEFAULT() ;
sub FB_HTMLCREF() ;
sub FB_PERLQQ() ;
sub FB_QUIET() ;
sub FB_WARN() ;
sub FB_XMLCREF() ;
}
package Encode::Unicode {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Encode::XS {
sub cat_decode($$$$$;$) ;
sub decode($$;$) ;
sub encode($$;$) ;
sub mime_name($) ;
sub name($) ;
sub needs_lines($) ;
sub perlio_ok($) ;
sub renew($) ;
sub renewed($) ;
}
package Encode::utf8 {
sub decode;
sub decode_xs;
sub encode;
sub encode_xs;
}
package Eval::Closure {
sub reftype($) ;
}
package Fcntl {
sub AUTOLOAD;
sub DN_ACCESS() ;
sub DN_ATTRIB() ;
sub DN_CREATE() ;
sub DN_DELETE() ;
sub DN_MODIFY() ;
sub DN_MULTISHOT() ;
sub DN_RENAME() ;
sub FAPPEND() ;
sub FASYNC() ;
sub FCREAT() ;
sub FDEFER() ;
sub FDSYNC() ;
sub FD_CLOEXEC() ;
sub FEXCL() ;
sub FLARGEFILE() ;
sub FNDELAY() ;
sub FNONBLOCK() ;
sub FRSYNC() ;
sub FSYNC() ;
sub FTRUNC() ;
sub F_ALLOCSP() ;
sub F_ALLOCSP64() ;
sub F_COMPAT() ;
sub F_DUP2FD() ;
sub F_DUPFD() ;
sub F_EXLCK() ;
sub F_FREESP() ;
sub F_FREESP64() ;
sub F_FSYNC() ;
sub F_FSYNC64() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLEASE() ;
sub F_GETLK() ;
sub F_GETLK64() ;
sub F_GETOWN() ;
sub F_GETSIG() ;
sub F_NODNY() ;
sub F_NOTIFY() ;
sub F_POSIX() ;
sub F_RDACC() ;
sub F_RDDNY() ;
sub F_RDLCK() ;
sub F_RWACC() ;
sub F_RWDNY() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLEASE() ;
sub F_SETLK() ;
sub F_SETLK64() ;
sub F_SETLKW() ;
sub F_SETLKW64() ;
sub F_SETOWN() ;
sub F_SETSIG() ;
sub F_SHARE() ;
sub F_SHLCK() ;
sub F_UNLCK() ;
sub F_UNSHARE() ;
sub F_WRACC() ;
sub F_WRDNY() ;
sub F_WRLCK() ;
sub LOCK_MAND() ;
sub LOCK_READ() ;
sub LOCK_RW() ;
sub LOCK_WRITE() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_IGNORE_CTTY() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOATIME() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NOLINK() ;
sub O_NONBLOCK() ;
sub O_NOTRANS() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub S_ENFMT() ;
sub S_IFLNK() ;
sub S_IFMT;
sub S_IFSOCK() ;
sub S_IFWHT() ;
sub S_IMODE;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISENFMT;
sub S_ISFIFO;
sub S_ISLNK;
sub S_ISREG;
sub S_ISSOCK;
sub S_ISTXT() ;
sub S_ISVTX() ;
sub S_ISWHT;
}
package File::Find {
sub is_tainted($) ;
}
package File::Glob {
sub AUTOLOAD;
sub GLOB_ERROR;
sub bsd_glob;
sub bsd_glob_override;
sub csh_glob;
}
package FileHandle {
sub clearerr;
sub error;
sub flush;
sub getpos;
sub new_tmpfile;
sub setbuf;
sub setpos;
sub setvbuf;
sub ungetc;
}
package Filter::Util::Call {
sub filter_del() ;
sub filter_read(;$) ;
sub real_import($$$) ;
sub unimport(;$@) ;
}
package Filter::Util::Exec {
sub filter_add($@) ;
}
package Filter::decrypt {
sub import;
sub unimport;
}
package Filter::tee {
sub import;
}
package GD {
sub constant;
}
package GD::Font {
sub DESTROY($) ;
sub Giant($) ;
sub Large($) ;
sub MediumBold($) ;
sub Small($) ;
sub Tiny($) ;
sub height($) ;
sub load($$) ;
sub nchars($) ;
sub offset($) ;
sub width($) ;
}
package GD::Image {
sub DESTROY($) ;
sub STORABLE_freeze($$) ;
sub STORABLE_thaw;
sub _new($;$$$) ;
sub _newFromGd($$) ;
sub _newFromGd2($$) ;
sub _newFromGd2Part($$$$$$) ;
sub _newFromGif($$;$) ;
sub _newFromJpeg($$;$) ;
sub _newFromPng($$;$) ;
sub _newFromWBMP($$) ;
sub _newFromXbm($$) ;
sub alphaBlending($$) ;
sub arc($$$$$$$$) ;
sub boundsSafe($$$) ;
sub char($$$$$$) ;
sub charUp($$$$$$) ;
sub clip($;$$$$) ;
sub colorAllocate($$$$) ;
sub colorAllocateAlpha($$$$) ;
sub colorClosest($$$$) ;
sub colorClosestAlpha($$$$) ;
sub colorClosestHWB($$$$) ;
sub colorDeallocate($$) ;
sub colorExact($$$$) ;
sub colorExactAlpha($$$$) ;
sub colorResolve($$$$) ;
sub colorResolveAlpha($$$$) ;
sub colorsTotal($) ;
sub compare($$) ;
sub copy($$$$$$$$) ;
sub copyFlipHorizontal($) ;
sub copyFlipVertical($) ;
sub copyMerge($$$$$$$$$) ;
sub copyMergeGray($$$$$$$$$) ;
sub copyResampled($$$$$$$$$$) ;
sub copyResized($$$$$$$$$$) ;
sub copyReverseTranspose($) ;
sub copyRotate180($) ;
sub copyRotate270($) ;
sub copyRotate90($) ;
sub copyRotated($$$$$$$$$) ;
sub copyTranspose($) ;
sub dashedLine($$$$$$) ;
sub fill($$$$) ;
sub fillToBorder($$$$$) ;
sub filledArc($$$$$$$$$) ;
sub filledEllipse($$$$$$) ;
sub filledPolygon($$$) ;
sub filledRectangle($$$$$$) ;
sub flipHorizontal($) ;
sub flipVertical($) ;
sub gd($) ;
sub gd2($) ;
sub getBounds($) ;
sub getPixel($$$) ;
sub gif($) ;
sub gifanimadd($$$$$$$) ;
sub gifanimbegin($$$) ;
sub gifanimend($) ;
sub interlaced($;$) ;
sub isTrueColor($) ;
sub jpeg($) ;
sub line($$$$$$) ;
sub newFromGd2Data($$) ;
sub newFromGdData($$) ;
sub newFromGifData($$;$) ;
sub newFromJpegData($$;$) ;
sub newFromPngData($$;$) ;
sub newFromWBMPData($$;$) ;
sub newFromXpm($$) ;
sub openPolygon($$$) ;
sub paletteCopy($$) ;
sub png($;$) ;
sub rectangle($$$$$$) ;
sub rgb($$) ;
sub rotate180($) ;
sub saveAlpha($$) ;
sub setAntiAliased($$) ;
sub setAntiAliasedDontBlend($$$) ;
sub setBrush($$) ;
sub setPixel($$$$) ;
sub setStyle($;$) ;
sub setThickness($$) ;
sub setTile($$) ;
sub string($$$$$$) ;
sub stringFT($$$$$$$$;$) ;
sub stringFTCircle($$$$$$$$$$$) ;
sub stringTTF($$$$$$$$;$) ;
sub stringUp($$$$$$) ;
sub transparent($;$) ;
sub trueColor($$) ;
sub trueColorToPalette($;$$) ;
sub unclosedPolygon($$$) ;
sub useFontConfig($$) ;
sub wbmp($) ;
}
package GDBM_File {
sub AUTOLOAD;
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub GDBM_OPENMASK() ;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub close;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub reorganize;
sub setopt;
sub sync;
}
package HTML::Entities {
sub UNICODE_SUPPORT() ;
sub _decode_entities;
sub _probably_utf8_chunk;
sub decode;
sub decode_entities;
}
package HTML::Parser {
sub _alloc_pstate;
sub attr_encoded;
sub backquote;
sub boolean_attribute_value;
sub case_sensitive;
sub closing_plaintext;
sub empty_element_tags;
sub eof;
sub handler;
sub ignore_elements;
sub ignore_tags;
sub marked_sections;
sub parse;
sub report_tags;
sub strict_comment;
sub strict_end;
sub strict_names;
sub unbroken_text;
sub utf8_mode;
sub xml_mode;
sub xml_pic;
}
package Hash::Util {
sub all_keys(\%\@\@) ;
sub hidden_ref_keys;
sub hv_store(\%$$) ;
sub legal_ref_keys;
sub reftype($) ;
}
package Hash::Util::FieldHash {
sub CLONE;
sub _active_fields;
sub _fieldhash($$) ;
sub _test_uvar_get;
sub _test_uvar_same;
sub _test_uvar_set;
sub id($) ;
sub id_2obj($) ;
sub reftype($) ;
sub register($@) ;
}
package IO::File {
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub new_tmpfile;
}
package IO::Handle {
sub _create_getline_subs;
sub blocking($;$) ;
sub clearerr;
sub error;
sub flush;
sub setbuf;
sub setvbuf;
sub sync;
sub ungetc;
sub untaint;
}
package IO::Poll {
sub _poll;
}
package IO::Seekable {
sub getpos;
sub setpos;
}
package IO::Socket {
sub sockatmark($) ;
}
package Imager {
sub DSO_call($$$) ;
sub DSO_close($) ;
sub DSO_funclist($) ;
sub DSO_open($) ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub _is_color_object($) ;
sub i_addcolors($;@) ;
sub i_arc($$$$$$$) ;
sub i_arc_aa($$$$$$$) ;
sub i_arc_aa_cfill($$$$$$$) ;
sub i_arc_cfill($$$$$$$) ;
sub i_arc_out($$$$$$$) ;
sub i_arc_out_aa($$$$$$$) ;
sub i_autolevels($$$$) ;
sub i_bezier_multi($$$$) ;
sub i_box($$$$$$) ;
sub i_box_cfill($$$$$$) ;
sub i_box_filled($$$$$$) ;
sub i_box_filledf($$$$$$) ;
sub i_bumpmap($$$$$$) ;
sub i_bumpmap_complex($$$$$$$$$$$$$$) ;
sub i_circle_aa($$$$$) ;
sub i_circle_out($$$$$) ;
sub i_circle_out_aa($$$$$) ;
sub i_clear_error() ;
sub i_colorcount($) ;
sub i_combine($;$) ;
sub i_compose($$$$$$$$;$$) ;
sub i_compose_mask($$$$$$$$$$$;$$) ;
sub i_contrast($$) ;
sub i_conv($$) ;
sub i_convert($$) ;
sub i_copy($) ;
sub i_copyto($$$$$$$$) ;
sub i_copyto_trans($$$$$$$$$) ;
sub i_count_colors($$) ;
sub i_diff_image($$;$) ;
sub i_errors() ;
sub i_findcolor($$) ;
sub i_flipxy($$) ;
sub i_flood_cfill($$$$) ;
sub i_flood_cfill_border($$$$$) ;
sub i_flood_fill($$$$) ;
sub i_flood_fill_border($$$$$) ;
sub i_fountain($$$$$$$$$$$) ;
sub i_gaussian($$) ;
sub i_get_anonymous_color_histo($;$) ;
sub i_get_image_file_limits() ;
sub i_get_pixel($$$) ;
sub i_getcolors($$;@) ;
sub i_glin($$$$) ;
sub i_glinf($$$$) ;
sub i_gpal($$$$) ;
sub i_gpixf($$$) ;
sub i_gradgen($;@) ;
sub i_gsamp($$$$$) ;
sub i_gsamp_bits($$$$$$$$) ;
sub i_gsampf($$$$$) ;
sub i_haar($) ;
sub i_hardinvert($) ;
sub i_hardinvertall($) ;
sub i_img_16_new($$$) ;
sub i_img_8_new($$$) ;
sub i_img_bits($) ;
sub i_img_diff($$) ;
sub i_img_diffd($$) ;
sub i_img_double_new($$$) ;
sub i_img_epsilonf() ;
sub i_img_get_height($) ;
sub i_img_get_width($) ;
sub i_img_getchannels($) ;
sub i_img_getdata($) ;
sub i_img_getmask($) ;
sub i_img_info($) ;
sub i_img_is_monochrome($) ;
sub i_img_make_palette($;@) ;
sub i_img_masked_new($$$$$$) ;
sub i_img_pal_new($$$$) ;
sub i_img_samef($$;$$) ;
sub i_img_setmask($$) ;
sub i_img_to_drgb($) ;
sub i_img_to_pal($$) ;
sub i_img_to_rgb($) ;
sub i_img_to_rgb16($) ;
sub i_img_type($) ;
sub i_img_virtual($) ;
sub i_init_log($$) ;
sub i_int_check_image_file_limits;
sub i_line($$$$$$$) ;
sub i_line_aa($$$$$$$) ;
sub i_list_formats() ;
sub i_log_enabled() ;
sub i_log_entry($$) ;
sub i_map($$) ;
sub i_matrix_transform($$$$;@) ;
sub i_maxcolors($) ;
sub i_mosaic($$) ;
sub i_nearest_color($;@) ;
sub i_new_fill_fount($$$$$$$$$$) ;
sub i_new_fill_hatch($$$$$$$) ;
sub i_new_fill_hatchf($$$$$$$) ;
sub i_new_fill_image($$$$$) ;
sub i_new_fill_opacity($$) ;
sub i_new_fill_solid($$) ;
sub i_new_fill_solidf($$) ;
sub i_noise($$$) ;
sub i_plin($$$;@) ;
sub i_plinf($$$;@) ;
sub i_poly_aa($$$$) ;
sub i_poly_aa_cfill($$$$) ;
sub i_postlevels($$) ;
sub i_ppal($$$;@) ;
sub i_ppal_p($$$$) ;
sub i_ppix($$$$) ;
sub i_ppixf($$$$) ;
sub i_psamp($$$$$;$$) ;
sub i_psamp_bits($$$$$$;$$) ;
sub i_psampf($$$$$;$$) ;
sub i_push_error($$) ;
sub i_radnoise($$$$$) ;
sub i_readbmp_wiol($;$) ;
sub i_readpnm_multi_wiol($$) ;
sub i_readpnm_wiol($$) ;
sub i_readraw_wiol($$$$$$) ;
sub i_readtga_wiol($$) ;
sub i_rotate90($$) ;
sub i_rotate_exact($$;@) ;
sub i_rubthru($$$$$$$$) ;
sub i_sametype($$$) ;
sub i_sametype_chans($$$$) ;
sub i_scale_mixing($$$) ;
sub i_scale_nn($$$) ;
sub i_scaleaxis($$$) ;
sub i_set_image_file_limits($$$) ;
sub i_setcolors($$;@) ;
sub i_tags_add($$$$$) ;
sub i_tags_addn($$$$) ;
sub i_tags_count($) ;
sub i_tags_delbycode($$) ;
sub i_tags_delbyname($$) ;
sub i_tags_delete($$) ;
sub i_tags_find($$$) ;
sub i_tags_findn($$$) ;
sub i_tags_get($$) ;
sub i_tags_get_string($$) ;
sub i_test_format_probe($$) ;
sub i_transform($$$$) ;
sub i_transform2($$$$$$$) ;
sub i_turbnoise($$$$) ;
sub i_unsharp_mask($$$) ;
sub i_watermark($$$$$) ;
sub i_writebmp_wiol($$) ;
sub i_writeppm_wiol($$) ;
sub i_writeraw_wiol($$) ;
sub i_writetga_wiol($$$$$) ;
sub io_new_bufchain() ;
sub io_new_buffer($) ;
sub io_new_cb($$$$;$) ;
sub io_new_fd($) ;
sub io_slurp($) ;
sub malloc_state() ;
}
package Imager::Color {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub info;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::Color::Float {
sub DESTROY;
sub i_hsv_to_rgb;
sub i_rgb_to_hsv;
sub new_internal;
sub rgba;
sub set_internal;
}
package Imager::Context {
sub CLONE(;@) ;
sub DESTROY($) ;
}
package Imager::CountColor {
sub count_color($$) ;
}
package Imager::File::GIF {
sub i_giflib_version;
sub i_readgif_multi_wiol;
sub i_readgif_single_wiol;
sub i_readgif_wiol;
sub i_writegif_wiol;
}
package Imager::File::ICO {
sub i_readico_multi;
sub i_readico_single;
sub i_writecur_multi_wiol;
sub i_writecur_wiol;
sub i_writeico_multi_wiol;
sub i_writeico_wiol;
}
package Imager::File::JPEG {
sub i_readjpeg_wiol;
sub i_writejpeg_wiol;
}
package Imager::File::PNG {
sub i_png_lib_version;
sub i_readpng_wiol;
sub i_writepng_wiol;
}
package Imager::File::SGI {
sub i_readsgi_wiol;
sub i_writesgi_wiol;
}
package Imager::File::TIFF {
sub i_readtiff_multi_wiol;
sub i_readtiff_wiol;
sub i_tiff_has_compression;
sub i_tiff_libversion;
sub i_writetiff_multi_wiol;
sub i_writetiff_multi_wiol_faxable;
sub i_writetiff_wiol;
sub i_writetiff_wiol_faxable;
}
package Imager::FillHandle {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
}
package Imager::Filter::DynTest {
sub lin_stretch($$$) ;
}
package Imager::Filter::Flines {
sub flines($) ;
}
package Imager::Filter::Mandelbrot {
sub mandelbrot($;$$$$$) ;
}
package Imager::Font::FT2 {
sub ft2_transform_box;
sub i_ft2_bbox;
sub i_ft2_bbox_r;
sub i_ft2_can_do_glyph_names;
sub i_ft2_can_face_name;
sub i_ft2_cp;
sub i_ft2_face_has_glyph_names;
sub i_ft2_face_name;
sub i_ft2_get_multiple_masters;
sub i_ft2_getdpi;
sub i_ft2_glyph_name;
sub i_ft2_has_chars;
sub i_ft2_is_multiple_master;
sub i_ft2_new;
sub i_ft2_set_mm_coords;
sub i_ft2_setdpi;
sub i_ft2_sethinting;
sub i_ft2_settransform;
sub i_ft2_text;
sub i_ft2_version;
}
package Imager::Font::FT2x {
sub CLONE_SKIP;
sub DESTROY;
}
package Imager::Font::T1 {
sub i_init_t1;
}
package Imager::Font::T1xs {
sub CLONE_SKIP;
sub DESTROY;
sub bbox;
sub cp;
sub face_name;
sub glyph_name;
sub has_chars;
sub new;
sub text;
}
package Imager::Font::W32 {
sub i_wf_addfont;
sub i_wf_bbox;
sub i_wf_cp;
sub i_wf_delfont;
sub i_wf_text;
}
package Imager::IO {
sub CLONE_SKIP(;@) ;
sub DESTROY($) ;
sub close($) ;
sub dump($;$) ;
sub eof($) ;
sub error($) ;
sub flush($) ;
sub getc($) ;
sub gets($;$$) ;
sub is_buffered($) ;
sub new_bufchain($) ;
sub new_buffer($$) ;
sub new_cb($$$$$) ;
sub new_fd($$) ;
sub peekc($) ;
sub peekn($$) ;
sub putc($$) ;
sub raw_close($) ;
sub raw_read($$$) ;
sub raw_read2($$) ;
sub raw_seek($$$) ;
sub raw_write($$) ;
sub read($$$) ;
sub read2($$) ;
sub seek($$$) ;
sub set_buffered($;$) ;
sub slurp($$) ;
sub write($$) ;
}
package Imager::ImgRaw {
sub DESTROY;
sub new;
}
package Imager::Internal::Hlines {
sub CLONE_SKIP($) ;
sub DESTROY($) ;
sub add($$$$) ;
sub dump($) ;
sub new($$$$) ;
sub new_img($) ;
sub testing() ;
}
package Internals {
sub HvREHASH(\%) ;
sub SvREADONLY(\[$%@];$) ;
sub SvREFCNT(\[$%@];$) ;
sub V;
sub hash_seed() ;
sub hv_clear_placeholders(\%) ;
sub rehash_seed() ;
}
package JSON::XS {
sub CLONE;
sub DESTROY;
sub allow_blessed;
sub allow_nonref;
sub allow_unknown;
sub ascii;
sub canonical;
sub convert_blessed;
sub decode;
sub decode_json($) ;
sub decode_prefix;
sub encode;
sub encode_json($) ;
sub filter_json_object;
sub filter_json_single_key_object;
sub from_json_($) ;
sub get_allow_blessed;
sub get_allow_nonref;
sub get_allow_unknown;
sub get_ascii;
sub get_canonical;
sub get_convert_blessed;
sub get_indent;
sub get_latin1;
sub get_max_depth;
sub get_max_size;
sub get_relaxed;
sub get_shrink;
sub get_space_after;
sub get_space_before;
sub get_utf8;
sub incr_parse;
sub incr_reset;
sub incr_skip;
sub indent;
sub latin1;
sub max_depth;
sub max_size;
sub new;
sub pretty;
sub relaxed;
sub shrink;
sub space_after;
sub space_before;
sub to_json_($) ;
sub utf8;
}
package List::MoreUtils {
sub _XScompiled;
sub _array_iterator(;$) ;
sub _natatime_iterator() ;
sub after(&@) ;
sub after_incl(&@) ;
sub all(&@) ;
sub any(&@) ;
sub apply(&@) ;
sub before(&@) ;
sub before_incl(&@) ;
sub distinct(@) ;
sub each_array(\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub each_arrayref;
sub false(&@) ;
sub first_index(&@) ;
sub first_value(&@) ;
sub firstidx(&@) ;
sub firstval(&@) ;
sub indexes(&@) ;
sub insert_after(&$\@) ;
sub insert_after_string($$\@) ;
sub last_index(&@) ;
sub last_value(&@) ;
sub lastidx(&@) ;
sub lastval(&@) ;
sub mesh(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
sub minmax(@) ;
sub natatime($@) ;
sub none(&@) ;
sub notall(&@) ;
sub pairwise(&\@\@) ;
sub part(&@) ;
sub true(&@) ;
sub uniq(@) ;
sub zip(\@\@;\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@\@) ;
}
package List::MoreUtils_ea {
sub DESTROY;
}
package List::MoreUtils_na {
sub DESTROY;
}
package List::Util {
sub first(&@) ;
sub max(@) ;
sub maxstr(@) ;
sub min(@) ;
sub minstr(@) ;
sub reduce(&@) ;
sub shuffle(@) ;
sub sum(@) ;
}
package Lzma::Filter {
sub DESTROY;
sub id;
}
package Lzma::Filter::BCJ {
sub _mk;
}
package Lzma::Filter::Delta {
sub _mk;
}
package Lzma::Filter::Lzma {
sub _mk;
sub _mkPreset;
}
package MIME::Base64 {
sub decode($) ;
sub decode_base64($) ;
sub decoded_base64_length($) ;
sub encode($;$) ;
sub encode_base64($;$) ;
sub encoded_base64_length($;$) ;
}
package MIME::QuotedPrint {
sub decode_qp($) ;
sub encode_qp($;$$) ;
}
package Math::BigInt::FastCalc {
sub __strip_zeros;
sub _acmp;
sub _copy;
sub _dec;
sub _inc;
sub _is_even;
sub _is_odd;
sub _is_one;
sub _is_ten;
sub _is_two;
sub _is_zero;
sub _len;
sub _new;
sub _one;
sub _ten;
sub _two;
sub _zero;
}
package Math::BigInt::GMP {
sub DESTROY($) ;
sub _1ex($$) ;
sub _acmp($$$) ;
sub _add($$$) ;
sub _alen($$) ;
sub _and($$$) ;
sub _as_bin($$) ;
sub _as_hex($$) ;
sub _as_oct($$) ;
sub _copy($$) ;
sub _dec($$) ;
sub _div($$$) ;
sub _fac($$) ;
sub _from_bin($$) ;
sub _from_hex($$) ;
sub _from_oct($$) ;
sub _gcd($$$) ;
sub _inc($$) ;
sub _is_even($$) ;
sub _is_odd($$) ;
sub _is_one($$) ;
sub _is_ten($$) ;
sub _is_two($$) ;
sub _is_zero($$) ;
sub _len($$) ;
sub _lsft($$$$) ;
sub _mod($$$) ;
sub _modinv($$$) ;
sub _modpow($$$$) ;
sub _mul($$$) ;
sub _new($$) ;
sub _new_attach($$$) ;
sub _one($) ;
sub _or($$$) ;
sub _pow($$$) ;
sub _root($$$) ;
sub _rsft($$$$) ;
sub _set($$$) ;
sub _sqrt($$) ;
sub _str($$) ;
sub _sub($$$;@) ;
sub _ten($) ;
sub _two($) ;
sub _xor($$$) ;
sub _zero($) ;
sub _zeros($$) ;
}
package Math::GMP {
sub DESTROY($) ;
sub add_two($$) ;
sub add_ui_gmp($$) ;
sub and_two($$) ;
sub bdiv_two($$) ;
sub cmp_two($$) ;
sub constant($$) ;
sub destroy($) ;
sub div_2exp_gmp($$) ;
sub div_two($$) ;
sub gcd_two($$) ;
sub get_str_gmp($$) ;
sub gmp_copy($) ;
sub gmp_fac($) ;
sub gmp_fib($) ;
sub gmp_jacobi($$) ;
sub gmp_legendre($$) ;
sub gmp_probab_prime($$) ;
sub gmp_sqrt($) ;
sub gmp_tstbit($$) ;
sub intify_gmp($) ;
sub mmod_gmp($$) ;
sub mod_2exp_gmp($$) ;
sub mod_two($$) ;
sub mul_2exp_gmp($$) ;
sub mul_two($$) ;
sub new_from_scalar($) ;
sub new_from_scalar_with_base($$) ;
sub or_two($$) ;
sub pow_two($$) ;
sub powm_gmp($$$) ;
sub sizeinbase_gmp($$) ;
sub stringify_gmp($) ;
sub sub_two($$) ;
sub uintify_gmp($) ;
sub xor_two($$) ;
}
package Math::Int64 {
sub BER_length;
sub BER_to_int64;
sub BER_to_uint64;
sub STORABLE_freeze;
sub STORABLE_thaw;
sub _add;
sub _and;
sub _backend;
sub _bnot;
sub _bool;
sub _clone;
sub _dec;
sub _div;
sub _eqn;
sub _gen;
sub _gtn;
sub _inc;
sub _left;
sub _len;
sub _ltn;
sub _mul;
sub _neg;
sub _nen;
sub _not;
sub _number;
sub _or;
sub _pow;
sub _rest;
sub _right;
sub _set_may_die_on_overflow;
sub _set_may_use_native;
sub _spaceship;
sub _string;
sub _sub;
sub _xor;
sub hex_to_int64;
sub hex_to_uint64;
sub int64;
sub int64_rand;
sub int64_srand;
sub int64_to_BER;
sub int64_to_hex;
sub int64_to_native;
sub int64_to_net;
sub int64_to_number;
sub int64_to_string;
sub native_to_int64;
sub native_to_uint64;
sub net_to_int64;
sub net_to_uint64;
sub string_to_int64;
sub string_to_uint64;
sub uint64;
sub uint64_rand;
sub uint64_to_BER;
sub uint64_to_hex;
sub uint64_to_native;
sub uint64_to_net;
sub uint64_to_number;
sub uint64_to_string;
}
package Math::MPC {
sub CLONE;
sub DESTROY;
sub RMPC_IM;
sub RMPC_INEX_IM;
sub RMPC_INEX_RE;
sub RMPC_RE;
sub Rmpc_abs;
sub Rmpc_acos;
sub Rmpc_acosh;
sub Rmpc_add;
sub Rmpc_add_fr;
sub Rmpc_add_ui;
sub Rmpc_arg;
sub Rmpc_asin;
sub Rmpc_asinh;
sub Rmpc_atan;
sub Rmpc_atanh;
sub Rmpc_clear;
sub Rmpc_clear_mpc;
sub Rmpc_clear_ptr;
sub Rmpc_cmp;
sub Rmpc_cmp_si;
sub Rmpc_cmp_si_si;
sub Rmpc_conj;
sub Rmpc_cos;
sub Rmpc_cosh;
sub Rmpc_d_div;
sub Rmpc_div;
sub Rmpc_div_2exp;
sub Rmpc_div_2si;
sub Rmpc_div_2ui;
sub Rmpc_div_d;
sub Rmpc_div_fr;
sub Rmpc_div_ld;
sub Rmpc_div_sj;
sub Rmpc_div_ui;
sub Rmpc_exp;
sub Rmpc_get_dc;
sub Rmpc_get_default_prec2;
sub Rmpc_get_default_prec;
sub Rmpc_get_default_rounding_mode;
sub Rmpc_get_im_prec;
sub Rmpc_get_ldc;
sub Rmpc_get_prec2;
sub Rmpc_get_prec;
sub Rmpc_get_re_prec;
sub Rmpc_get_str;
sub Rmpc_get_version;
sub Rmpc_imag;
sub Rmpc_init2;
sub Rmpc_init2_nobless;
sub Rmpc_init3;
sub Rmpc_init3_nobless;
sub Rmpc_inp_str;
sub Rmpc_ld_div;
sub Rmpc_log10;
sub Rmpc_log;
sub Rmpc_mul;
sub Rmpc_mul_2exp;
sub Rmpc_mul_2si;
sub Rmpc_mul_2ui;
sub Rmpc_mul_d;
sub Rmpc_mul_fr;
sub Rmpc_mul_i;
sub Rmpc_mul_ld;
sub Rmpc_mul_si;
sub Rmpc_mul_sj;
sub Rmpc_mul_ui;
sub Rmpc_neg;
sub Rmpc_norm;
sub Rmpc_pow;
sub Rmpc_pow_d;
sub Rmpc_pow_fr;
sub Rmpc_pow_ld;
sub Rmpc_pow_si;
sub Rmpc_pow_ui;
sub Rmpc_pow_z;
sub Rmpc_proj;
sub Rmpc_real;
sub Rmpc_set;
sub Rmpc_set_d;
sub Rmpc_set_d_d;
sub Rmpc_set_d_f;
sub Rmpc_set_d_fr;
sub Rmpc_set_d_ld;
sub Rmpc_set_d_q;
sub Rmpc_set_d_si;
sub Rmpc_set_d_sj;
sub Rmpc_set_d_ui;
sub Rmpc_set_d_uj;
sub Rmpc_set_d_z;
sub Rmpc_set_dc;
sub Rmpc_set_default_prec2;
sub Rmpc_set_default_prec;
sub Rmpc_set_default_rounding_mode;
sub Rmpc_set_f;
sub Rmpc_set_f_d;
sub Rmpc_set_f_f;
sub Rmpc_set_f_fr;
sub Rmpc_set_f_ld;
sub Rmpc_set_f_q;
sub Rmpc_set_f_si;
sub Rmpc_set_f_sj;
sub Rmpc_set_f_ui;
sub Rmpc_set_f_uj;
sub Rmpc_set_f_z;
sub Rmpc_set_fr;
sub Rmpc_set_fr_d;
sub Rmpc_set_fr_f;
sub Rmpc_set_fr_fr;
sub Rmpc_set_fr_ld;
sub Rmpc_set_fr_q;
sub Rmpc_set_fr_si;
sub Rmpc_set_fr_sj;
sub Rmpc_set_fr_ui;
sub Rmpc_set_fr_uj;
sub Rmpc_set_fr_z;
sub Rmpc_set_im_prec;
sub Rmpc_set_ld;
sub Rmpc_set_ld_d;
sub Rmpc_set_ld_f;
sub Rmpc_set_ld_fr;
sub Rmpc_set_ld_ld;
sub Rmpc_set_ld_q;
sub Rmpc_set_ld_si;
sub Rmpc_set_ld_sj;
sub Rmpc_set_ld_ui;
sub Rmpc_set_ld_uj;
sub Rmpc_set_ld_z;
sub Rmpc_set_ldc;
sub Rmpc_set_nan;
sub Rmpc_set_prec;
sub Rmpc_set_q;
sub Rmpc_set_q_d;
sub Rmpc_set_q_f;
sub Rmpc_set_q_fr;
sub Rmpc_set_q_ld;
sub Rmpc_set_q_q;
sub Rmpc_set_q_si;
sub Rmpc_set_q_sj;
sub Rmpc_set_q_ui;
sub Rmpc_set_q_uj;
sub Rmpc_set_q_z;
sub Rmpc_set_re_prec;
sub Rmpc_set_si;
sub Rmpc_set_si_d;
sub Rmpc_set_si_f;
sub Rmpc_set_si_fr;
sub Rmpc_set_si_ld;
sub Rmpc_set_si_q;
sub Rmpc_set_si_si;
sub Rmpc_set_si_sj;
sub Rmpc_set_si_ui;
sub Rmpc_set_si_uj;
sub Rmpc_set_si_z;
sub Rmpc_set_sj;
sub Rmpc_set_sj_d;
sub Rmpc_set_sj_f;
sub Rmpc_set_sj_fr;
sub Rmpc_set_sj_ld;
sub Rmpc_set_sj_q;
sub Rmpc_set_sj_si;
sub Rmpc_set_sj_sj;
sub Rmpc_set_sj_ui;
sub Rmpc_set_sj_uj;
sub Rmpc_set_sj_z;
sub Rmpc_set_str;
sub Rmpc_set_ui;
sub Rmpc_set_ui_d;
sub Rmpc_set_ui_f;
sub Rmpc_set_ui_fr;
sub Rmpc_set_ui_ld;
sub Rmpc_set_ui_q;
sub Rmpc_set_ui_si;
sub Rmpc_set_ui_sj;
sub Rmpc_set_ui_ui;
sub Rmpc_set_ui_uj;
sub Rmpc_set_ui_z;
sub Rmpc_set_uj;
sub Rmpc_set_uj_d;
sub Rmpc_set_uj_f;
sub Rmpc_set_uj_fr;
sub Rmpc_set_uj_ld;
sub Rmpc_set_uj_q;
sub Rmpc_set_uj_si;
sub Rmpc_set_uj_sj;
sub Rmpc_set_uj_ui;
sub Rmpc_set_uj_uj;
sub Rmpc_set_uj_z;
sub Rmpc_set_z;
sub Rmpc_set_z_d;
sub Rmpc_set_z_f;
sub Rmpc_set_z_fr;
sub Rmpc_set_z_ld;
sub Rmpc_set_z_q;
sub Rmpc_set_z_si;
sub Rmpc_set_z_sj;
sub Rmpc_set_z_ui;
sub Rmpc_set_z_uj;
sub Rmpc_set_z_z;
sub Rmpc_sin;
sub Rmpc_sin_cos;
sub Rmpc_sinh;
sub Rmpc_sj_div;
sub Rmpc_sqr;
sub Rmpc_sqrt;
sub Rmpc_strtoc;
sub Rmpc_sub;
sub Rmpc_sub_ui;
sub Rmpc_swap;
sub Rmpc_tan;
sub Rmpc_tanh;
sub Rmpc_ui_div;
sub Rmpc_ui_sub;
sub Rmpc_ui_ui_sub;
sub TRmpc_inp_str;
sub _MPC_VERSION;
sub _MPC_VERSION_MAJOR;
sub _MPC_VERSION_MINOR;
sub _MPC_VERSION_NUM;
sub _MPC_VERSION_PATCHLEVEL;
sub _MPC_VERSION_STRING;
sub _Rmpc_out_str;
sub _Rmpc_out_strP;
sub _Rmpc_out_strPS;
sub _Rmpc_out_strS;
sub _get_i_string;
sub _get_r_string;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _have_Complex_h;
sub _itsa;
sub _mpc_d_div;
sub _mpc_div_d;
sub _mpc_div_ld;
sub _mpc_div_sj;
sub _mpc_ld_div;
sub _mpc_mul_d;
sub _mpc_mul_ld;
sub _mpc_mul_sj;
sub _mpc_sj_div;
sub _mpfr_buildopt_tls_p;
sub _new_im;
sub _new_real;
sub _wrap_count;
sub get_xs_version;
sub gmp_v;
sub mpfr_v;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_log;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_not_equiv;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
}
package Math::MPFR {
sub DESTROY;
sub RMPFR_PREC_MAX;
sub RMPFR_PREC_MIN;
sub RMPFR_VERSION_NUM;
sub Rgmp_randclear;
sub Rgmp_randinit_default;
sub Rgmp_randinit_lc_2exp;
sub Rgmp_randinit_lc_2exp_size;
sub Rgmp_randinit_mt;
sub Rgmp_randseed;
sub Rgmp_randseed_ui;
sub Rmpfr_abs;
sub Rmpfr_acos;
sub Rmpfr_acosh;
sub Rmpfr_add;
sub Rmpfr_add_d;
sub Rmpfr_add_q;
sub Rmpfr_add_si;
sub Rmpfr_add_ui;
sub Rmpfr_add_z;
sub Rmpfr_agm;
sub Rmpfr_ai;
sub Rmpfr_asin;
sub Rmpfr_asinh;
sub Rmpfr_atan2;
sub Rmpfr_atan;
sub Rmpfr_atanh;
sub Rmpfr_buildopt_decimal_p;
sub Rmpfr_buildopt_gmpinternals_p;
sub Rmpfr_buildopt_tls_p;
sub Rmpfr_buildopt_tune_case;
sub Rmpfr_can_round;
sub Rmpfr_cbrt;
sub Rmpfr_ceil;
sub Rmpfr_check_range;
sub Rmpfr_clear;
sub Rmpfr_clear_divby0;
sub Rmpfr_clear_erangeflag;
sub Rmpfr_clear_flags;
sub Rmpfr_clear_inexflag;
sub Rmpfr_clear_mpfr;
sub Rmpfr_clear_nanflag;
sub Rmpfr_clear_overflow;
sub Rmpfr_clear_ptr;
sub Rmpfr_clear_underflow;
sub Rmpfr_clears;
sub Rmpfr_cmp;
sub Rmpfr_cmp_d;
sub Rmpfr_cmp_f;
sub Rmpfr_cmp_ld;
sub Rmpfr_cmp_q;
sub Rmpfr_cmp_si;
sub Rmpfr_cmp_si_2exp;
sub Rmpfr_cmp_ui;
sub Rmpfr_cmp_ui_2exp;
sub Rmpfr_cmp_z;
sub Rmpfr_cmpabs;
sub Rmpfr_const_catalan;
sub Rmpfr_const_euler;
sub Rmpfr_const_log2;
sub Rmpfr_const_pi;
sub Rmpfr_copysign;
sub Rmpfr_cos;
sub Rmpfr_cosh;
sub Rmpfr_cot;
sub Rmpfr_coth;
sub Rmpfr_csc;
sub Rmpfr_csch;
sub Rmpfr_d_div;
sub Rmpfr_d_sub;
sub Rmpfr_deref2;
sub Rmpfr_digamma;
sub Rmpfr_dim;
sub Rmpfr_div;
sub Rmpfr_div_2exp;
sub Rmpfr_div_2si;
sub Rmpfr_div_2ui;
sub Rmpfr_div_d;
sub Rmpfr_div_q;
sub Rmpfr_div_si;
sub Rmpfr_div_ui;
sub Rmpfr_div_z;
sub Rmpfr_divby0_p;
sub Rmpfr_dump;
sub Rmpfr_eint;
sub Rmpfr_eq;
sub Rmpfr_equal_p;
sub Rmpfr_erangeflag_p;
sub Rmpfr_erf;
sub Rmpfr_erfc;
sub Rmpfr_exp10;
sub Rmpfr_exp2;
sub Rmpfr_exp;
sub Rmpfr_expm1;
sub Rmpfr_fac_ui;
sub Rmpfr_fits_IV_p;
sub Rmpfr_fits_UV_p;
sub Rmpfr_fits_intmax_p;
sub Rmpfr_fits_sint_p;
sub Rmpfr_fits_slong_p;
sub Rmpfr_fits_sshort_p;
sub Rmpfr_fits_uint_p;
sub Rmpfr_fits_uintmax_p;
sub Rmpfr_fits_ulong_p;
sub Rmpfr_fits_ushort_p;
sub Rmpfr_floor;
sub Rmpfr_fma;
sub Rmpfr_fmod;
sub Rmpfr_fms;
sub Rmpfr_frac;
sub Rmpfr_free_cache;
sub Rmpfr_frexp;
sub Rmpfr_gamma;
sub Rmpfr_get_IV;
sub Rmpfr_get_LD;
sub Rmpfr_get_NV;
sub Rmpfr_get_UV;
sub Rmpfr_get_d1;
sub Rmpfr_get_d;
sub Rmpfr_get_d_2exp;
sub Rmpfr_get_decimal64;
sub Rmpfr_get_default_prec;
sub Rmpfr_get_default_rounding_mode;
sub Rmpfr_get_emax;
sub Rmpfr_get_emax_max;
sub Rmpfr_get_emax_min;
sub Rmpfr_get_emin;
sub Rmpfr_get_emin_max;
sub Rmpfr_get_emin_min;
sub Rmpfr_get_exp;
sub Rmpfr_get_f;
sub Rmpfr_get_flt;
sub Rmpfr_get_ld;
sub Rmpfr_get_ld_2exp;
sub Rmpfr_get_patches;
sub Rmpfr_get_prec;
sub Rmpfr_get_si;
sub Rmpfr_get_sj;
sub Rmpfr_get_ui;
sub Rmpfr_get_uj;
sub Rmpfr_get_version;
sub Rmpfr_get_z;
sub Rmpfr_get_z_2exp;
sub Rmpfr_get_z_exp;
sub Rmpfr_grandom;
sub Rmpfr_greater_p;
sub Rmpfr_greaterequal_p;
sub Rmpfr_hypot;
sub Rmpfr_inexflag_p;
sub Rmpfr_inf_p;
sub Rmpfr_init2;
sub Rmpfr_init2_nobless;
sub Rmpfr_init;
sub Rmpfr_init_nobless;
sub Rmpfr_init_set;
sub Rmpfr_init_set_d;
sub Rmpfr_init_set_d_nobless;
sub Rmpfr_init_set_f;
sub Rmpfr_init_set_f_nobless;
sub Rmpfr_init_set_ld;
sub Rmpfr_init_set_ld_nobless;
sub Rmpfr_init_set_nobless;
sub Rmpfr_init_set_q;
sub Rmpfr_init_set_q_nobless;
sub Rmpfr_init_set_si;
sub Rmpfr_init_set_si_nobless;
sub Rmpfr_init_set_str;
sub Rmpfr_init_set_str_nobless;
sub Rmpfr_init_set_ui;
sub Rmpfr_init_set_ui_nobless;
sub Rmpfr_init_set_z;
sub Rmpfr_init_set_z_nobless;
sub Rmpfr_inp_str;
sub Rmpfr_integer_p;
sub Rmpfr_j0;
sub Rmpfr_j1;
sub Rmpfr_jn;
sub Rmpfr_less_p;
sub Rmpfr_lessequal_p;
sub Rmpfr_lessgreater_p;
sub Rmpfr_lgamma;
sub Rmpfr_li2;
sub Rmpfr_lngamma;
sub Rmpfr_log10;
sub Rmpfr_log1p;
sub Rmpfr_log2;
sub Rmpfr_log;
sub Rmpfr_max;
sub Rmpfr_min;
sub Rmpfr_min_prec;
sub Rmpfr_modf;
sub Rmpfr_mul;
sub Rmpfr_mul_2exp;
sub Rmpfr_mul_2si;
sub Rmpfr_mul_2ui;
sub Rmpfr_mul_d;
sub Rmpfr_mul_q;
sub Rmpfr_mul_si;
sub Rmpfr_mul_ui;
sub Rmpfr_mul_z;
sub Rmpfr_nan_p;
sub Rmpfr_nanflag_p;
sub Rmpfr_neg;
sub Rmpfr_nextabove;
sub Rmpfr_nextbelow;
sub Rmpfr_nexttoward;
sub Rmpfr_number_p;
sub Rmpfr_overflow_p;
sub Rmpfr_pow;
sub Rmpfr_pow_si;
sub Rmpfr_pow_ui;
sub Rmpfr_pow_z;
sub Rmpfr_prec_round;
sub Rmpfr_print_binary;
sub Rmpfr_random2;
sub Rmpfr_rec_sqrt;
sub Rmpfr_regular_p;
sub Rmpfr_reldiff;
sub Rmpfr_remainder;
sub Rmpfr_remquo;
sub Rmpfr_rint;
sub Rmpfr_rint_ceil;
sub Rmpfr_rint_floor;
sub Rmpfr_rint_round;
sub Rmpfr_rint_trunc;
sub Rmpfr_root;
sub Rmpfr_round;
sub Rmpfr_sec;
sub Rmpfr_sech;
sub Rmpfr_set;
sub Rmpfr_set_LD;
sub Rmpfr_set_d;
sub Rmpfr_set_decimal64;
sub Rmpfr_set_default_prec;
sub Rmpfr_set_default_rounding_mode;
sub Rmpfr_set_divby0;
sub Rmpfr_set_emax;
sub Rmpfr_set_emin;
sub Rmpfr_set_erangeflag;
sub Rmpfr_set_exp;
sub Rmpfr_set_f;
sub Rmpfr_set_flt;
sub Rmpfr_set_inexflag;
sub Rmpfr_set_inf;
sub Rmpfr_set_ld;
sub Rmpfr_set_nan;
sub Rmpfr_set_nanflag;
sub Rmpfr_set_overflow;
sub Rmpfr_set_prec;
sub Rmpfr_set_prec_raw;
sub Rmpfr_set_q;
sub Rmpfr_set_si;
sub Rmpfr_set_si_2exp;
sub Rmpfr_set_sj;
sub Rmpfr_set_sj_2exp;
sub Rmpfr_set_str;
sub Rmpfr_set_str_binary;
sub Rmpfr_set_ui;
sub Rmpfr_set_ui_2exp;
sub Rmpfr_set_uj;
sub Rmpfr_set_uj_2exp;
sub Rmpfr_set_underflow;
sub Rmpfr_set_z;
sub Rmpfr_set_z_2exp;
sub Rmpfr_set_zero;
sub Rmpfr_setsign;
sub Rmpfr_sgn;
sub Rmpfr_si_div;
sub Rmpfr_si_sub;
sub Rmpfr_signbit;
sub Rmpfr_sin;
sub Rmpfr_sin_cos;
sub Rmpfr_sinh;
sub Rmpfr_sinh_cosh;
sub Rmpfr_sqr;
sub Rmpfr_sqrt;
sub Rmpfr_sqrt_ui;
sub Rmpfr_strtofr;
sub Rmpfr_sub;
sub Rmpfr_sub_d;
sub Rmpfr_sub_q;
sub Rmpfr_sub_si;
sub Rmpfr_sub_ui;
sub Rmpfr_sub_z;
sub Rmpfr_subnormalize;
sub Rmpfr_sum;
sub Rmpfr_swap;
sub Rmpfr_tan;
sub Rmpfr_tanh;
sub Rmpfr_trunc;
sub Rmpfr_ui_div;
sub Rmpfr_ui_pow;
sub Rmpfr_ui_pow_ui;
sub Rmpfr_ui_sub;
sub Rmpfr_underflow_p;
sub Rmpfr_unordered_p;
sub Rmpfr_urandom;
sub Rmpfr_urandomb;
sub Rmpfr_y0;
sub Rmpfr_y1;
sub Rmpfr_yn;
sub Rmpfr_z_sub;
sub Rmpfr_zero_p;
sub Rmpfr_zeta;
sub Rmpfr_zeta_ui;
sub TRmpfr_inp_str;
sub _MPFR_VERSION;
sub _MPFR_VERSION_MAJOR;
sub _MPFR_VERSION_MINOR;
sub _MPFR_VERSION_PATCHLEVEL;
sub _MPFR_VERSION_STRING;
sub _MPFR_WANT_DECIMAL_FLOATS;
sub _Rmpfr_out_str;
sub _Rmpfr_out_strP;
sub _Rmpfr_out_strPS;
sub _Rmpfr_out_strS;
sub _TRmpfr_out_str;
sub _TRmpfr_out_strP;
sub _TRmpfr_out_strPS;
sub _TRmpfr_out_strS;
sub _has_inttypes;
sub _has_longdouble;
sub _has_longlong;
sub _isobject;
sub _itsa;
sub _max_base;
sub _wrap_count;
sub get_package_name;
sub get_refcnt;
sub get_xs_version;
sub gmp_v;
sub overload_abs;
sub overload_add;
sub overload_add_eq;
sub overload_atan2;
sub overload_copy;
sub overload_cos;
sub overload_dec;
sub overload_div;
sub overload_div_eq;
sub overload_equiv;
sub overload_exp;
sub overload_gt;
sub overload_gte;
sub overload_inc;
sub overload_int;
sub overload_log;
sub overload_lt;
sub overload_lte;
sub overload_mul;
sub overload_mul_eq;
sub overload_not;
sub overload_not_equiv;
sub overload_pow;
sub overload_pow_eq;
sub overload_sin;
sub overload_spaceship;
sub overload_sqrt;
sub overload_sub;
sub overload_sub_eq;
sub overload_true;
sub wrap_mpfr_fprintf;
sub wrap_mpfr_fprintf_rnd;
sub wrap_mpfr_printf;
sub wrap_mpfr_printf_rnd;
sub wrap_mpfr_snprintf;
sub wrap_mpfr_snprintf_rnd;
sub wrap_mpfr_sprintf;
sub wrap_mpfr_sprintf_rnd;
}
package Math::MPFR::V {
sub Rmpfr_get_version;
sub _MPFR_VERSION;
sub _MPFR_VERSION_MAJOR;
sub _MPFR_VERSION_MINOR;
sub _MPFR_VERSION_PATCHLEVEL;
sub _MPFR_VERSION_STRING;
sub ___GMP_CC;
sub ___GMP_CFLAGS;
sub ___GNU_MP_VERSION;
sub ___GNU_MP_VERSION_MINOR;
sub ___GNU_MP_VERSION_PATCHLEVEL;
sub gmp_v;
}
package Math::UInt64 {
sub STORABLE_freeze;
sub STORABLE_thaw;
sub _add;
sub _and;
sub _bnot;
sub _bool;
sub _clone;
sub _dec;
sub _div;
sub _eqn;
sub _gen;
sub _gtn;
sub _inc;
sub _left;
sub _len;
sub _ltn;
sub _mul;
sub _neg;
sub _nen;
sub _not;
sub _number;
sub _or;
sub _pow;
sub _rest;
sub _right;
sub _spaceship;
sub _string;
sub _sub;
sub _xor;
}
package Moose {
sub blessed($) ;
sub is_class_loaded;
}
package Moose::Exporter {
sub _export_is_flagged;
sub _flag_as_reexport;
sub first_index(&@) ;
sub is_class_loaded;
sub reftype($) ;
sub subname;
sub uniq(@) ;
}
package Moose::Meta::Attribute {
sub any(&@) ;
sub blessed($) ;
sub is_class_loaded;
sub weaken($) ;
}
package Moose::Meta::Class {
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
sub first_index(&@) ;
sub uniq(@) ;
}
package Moose::Meta::Class::Immutable::Trait {
sub blessed($) ;
}
package Moose::Meta::Method::Constructor {
sub any(&@) ;
sub blessed($) ;
sub looks_like_number($) ;
sub refaddr($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Delegation {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Method::Destructor {
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Object::Trait {
sub blessed($) ;
}
package Moose::Meta::Role {
sub blessed($) ;
}
package Moose::Meta::Role::Application::RoleSummation {
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToClass {
sub blessed($) ;
sub firstval(&@) ;
sub weaken($) ;
}
package Moose::Meta::Role::Application::ToInstance {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::Role::Application::ToRole {
sub blessed($) ;
}
package Moose::Meta::Role::Attribute {
sub all(&@) ;
sub blessed($) ;
sub weaken($) ;
}
package Moose::Meta::Role::Composite {
sub blessed($) ;
}
package Moose::Meta::TypeCoercion::Union {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint {
sub blessed($) ;
sub refaddr($) ;
sub subname;
}
package Moose::Meta::TypeConstraint::Class {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::DuckType {
sub all(&@) ;
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Parameterized {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Registry {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Role {
sub blessed($) ;
}
package Moose::Meta::TypeConstraint::Union {
sub all(&@) ;
sub first(&@) ;
}
package Moose::Util {
sub _STRING($) ;
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::MetaRole {
sub all(&@) ;
sub blessed($) ;
sub first(&@) ;
}
package Moose::Util::TypeConstraints {
sub all(&@) ;
sub any(&@) ;
sub blessed($) ;
sub reftype($) ;
}
package Moose::Util::TypeConstraints::Builtins {
sub _RegexpRef;
sub blessed($) ;
sub is_class_loaded;
sub looks_like_number($) ;
sub reftype($) ;
}
package NDBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub clearerr;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Net::SSH2 {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub CLONE;
sub DESTROY;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub O_ALIAS() ;
sub O_ASYNC() ;
sub O_DEFER() ;
sub O_DIRECT() ;
sub O_DIRECTORY() ;
sub O_DSYNC() ;
sub O_EXLOCK() ;
sub O_LARGEFILE() ;
sub O_NDELAY() ;
sub O_NOCTTY() ;
sub O_NOFOLLOW() ;
sub O_NONBLOCK() ;
sub O_RSRC() ;
sub O_RSYNC() ;
sub O_SHLOCK() ;
sub O_SYNC() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub UIO_MAXIOV() ;
sub _new;
sub _poll;
sub _scp_get;
sub _scp_put;
sub _startup;
sub auth_agent;
sub auth_hostbased;
sub auth_keyboard;
sub auth_list;
sub auth_ok;
sub auth_password;
sub auth_publickey;
sub banner;
sub block_directions;
sub blocking;
sub callback;
sub channel;
sub constant;
sub debug;
sub disconnect;
sub error;
sub hostkey;
sub inet_aton;
sub inet_ntoa;
sub listen;
sub method;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub public_key;
sub sftp;
sub sock;
sub sockaddr_family;
sub tcpip;
sub timeout;
sub trace;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub version;
}
package Net::SSH2::Channel {
sub DESTROY;
sub blocking;
sub close;
sub eof;
sub exit_signal;
sub exit_status;
sub ext_data;
sub flush;
sub process;
sub pty;
sub pty_size;
sub read;
sub send_eof;
sub session;
sub setenv;
sub wait_closed;
sub write;
}
package Net::SSH2::Dir {
sub DESTROY;
sub read;
}
package Net::SSH2::File {
sub DESTROY;
sub read;
sub seek;
sub setstat;
sub stat;
sub tell;
sub write;
}
package Net::SSH2::Listener {
sub DESTROY;
sub accept;
}
package Net::SSH2::PublicKey {
sub DESTROY;
sub add;
sub fetch;
sub remove;
}
package Net::SSH2::SFTP {
sub DESTROY;
sub error;
sub mkdir;
sub open;
sub opendir;
sub readlink;
sub realpath;
sub rename;
sub rmdir;
sub session;
sub setstat;
sub stat;
sub symlink;
sub unlink;
}
package Net::SSLeay {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub ASN1_INTEGER_free($) ;
sub ASN1_INTEGER_get($) ;
sub ASN1_INTEGER_new() ;
sub ASN1_INTEGER_set($$) ;
sub ASN1_TIME_free($) ;
sub ASN1_TIME_new() ;
sub ASN1_TIME_set($$) ;
sub BIO_eof($) ;
sub BIO_f_ssl() ;
sub BIO_free($) ;
sub BIO_new($) ;
sub BIO_new_buffer_ssl_connect($) ;
sub BIO_new_file($$) ;
sub BIO_new_ssl($$) ;
sub BIO_new_ssl_connect($) ;
sub BIO_pending($) ;
sub BIO_read($;$) ;
sub BIO_s_mem() ;
sub BIO_ssl_copy_session_id($$) ;
sub BIO_ssl_shutdown($) ;
sub BIO_wpending($) ;
sub BIO_write($$) ;
sub CIPHER_description($$$) ;
sub CIPHER_get_bits($;$) ;
sub CIPHER_get_name($) ;
sub CLONE(;@) ;
sub COMP_add_compression_method($$) ;
sub CTX_add_client_CA($$) ;
sub CTX_add_extra_chain_cert($$) ;
sub CTX_add_session($$) ;
sub CTX_callback_ctrl($$$) ;
sub CTX_check_private_key($) ;
sub CTX_ctrl($$$$) ;
sub CTX_flush_sessions($$) ;
sub CTX_free($) ;
sub CTX_get_app_data($) ;
sub CTX_get_cert_store($) ;
sub CTX_get_client_CA_list($) ;
sub CTX_get_ex_data($$) ;
sub CTX_get_ex_new_index($$$$$) ;
sub CTX_get_mode($) ;
sub CTX_get_options($) ;
sub CTX_get_quiet_shutdown($) ;
sub CTX_get_read_ahead($) ;
sub CTX_get_session_cache_mode($) ;
sub CTX_get_timeout($) ;
sub CTX_get_verify_depth($) ;
sub CTX_get_verify_mode($) ;
sub CTX_load_verify_locations($$$) ;
sub CTX_need_tmp_RSA($) ;
sub CTX_new() ;
sub CTX_new_with_method($) ;
sub CTX_remove_session($$) ;
sub CTX_sess_accept($) ;
sub CTX_sess_accept_good($) ;
sub CTX_sess_accept_renegotiate($) ;
sub CTX_sess_cache_full($) ;
sub CTX_sess_cb_hits($) ;
sub CTX_sess_connect($) ;
sub CTX_sess_connect_good($) ;
sub CTX_sess_connect_renegotiate($) ;
sub CTX_sess_get_cache_size($) ;
sub CTX_sess_hits($) ;
sub CTX_sess_misses($) ;
sub CTX_sess_number($) ;
sub CTX_sess_set_cache_size($$) ;
sub CTX_sess_timeouts($) ;
sub CTX_sessions($) ;
sub CTX_set1_param($$) ;
sub CTX_set_app_data($$) ;
sub CTX_set_cert_store($$) ;
sub CTX_set_cert_verify_callback($$;$) ;
sub CTX_set_cipher_list($$) ;
sub CTX_set_client_CA_list($$) ;
sub CTX_set_default_passwd_cb($;$) ;
sub CTX_set_default_passwd_cb_userdata($;$) ;
sub CTX_set_default_verify_paths($) ;
sub CTX_set_ex_data($$$) ;
sub CTX_set_mode($$) ;
sub CTX_set_next_proto_select_cb($$;$) ;
sub CTX_set_next_protos_advertised_cb($$;$) ;
sub CTX_set_options($$) ;
sub CTX_set_purpose($$) ;
sub CTX_set_quiet_shutdown($$) ;
sub CTX_set_read_ahead($$) ;
sub CTX_set_session_cache_mode($$) ;
sub CTX_set_session_id_context($$$) ;
sub CTX_set_ssl_version($$) ;
sub CTX_set_timeout($$) ;
sub CTX_set_tlsext_servername_callback($;$$) ;
sub CTX_set_tmp_dh($$) ;
sub CTX_set_tmp_dh_callback($$) ;
sub CTX_set_tmp_rsa($$) ;
sub CTX_set_tmp_rsa_callback($$) ;
sub CTX_set_trust($$) ;
sub CTX_set_verify($$;$) ;
sub CTX_set_verify_depth($$) ;
sub CTX_tlsv1_new() ;
sub CTX_use_PKCS12_file($$;$) ;
sub CTX_use_PrivateKey($$) ;
sub CTX_use_PrivateKey_file($$$) ;
sub CTX_use_RSAPrivateKey($$) ;
sub CTX_use_RSAPrivateKey_file($$$) ;
sub CTX_use_certificate($$) ;
sub CTX_use_certificate_chain_file($$) ;
sub CTX_use_certificate_file($$$) ;
sub CTX_v23_new() ;
sub CTX_v3_new() ;
sub DH_free($) ;
sub ENGINE_by_id($) ;
sub ENGINE_load_builtin_engines() ;
sub ENGINE_register_all_complete() ;
sub ENGINE_set_default($$) ;
sub ERR_clear_error() ;
sub ERR_error_string($;$) ;
sub ERR_get_error() ;
sub ERR_load_RAND_strings() ;
sub ERR_load_SSL_strings() ;
sub ERR_load_crypto_strings() ;
sub ERR_peek_error() ;
sub ERR_put_error($$$$$) ;
sub EVP_Digest(;@) ;
sub EVP_DigestFinal($) ;
sub EVP_DigestFinal_ex($) ;
sub EVP_DigestInit($$) ;
sub EVP_DigestInit_ex($$$) ;
sub EVP_DigestUpdate($$) ;
sub EVP_MD_CTX_create() ;
sub EVP_MD_CTX_destroy($) ;
sub EVP_MD_CTX_md($) ;
sub EVP_MD_size($) ;
sub EVP_MD_type($) ;
sub EVP_PKEY_assign_RSA($$) ;
sub EVP_PKEY_bits($) ;
sub EVP_PKEY_copy_parameters($$) ;
sub EVP_PKEY_free($) ;
sub EVP_PKEY_id($) ;
sub EVP_PKEY_new() ;
sub EVP_PKEY_size($) ;
sub EVP_add_digest($) ;
sub EVP_get_cipherbyname($) ;
sub EVP_get_digestbyname($) ;
sub EVP_sha1() ;
sub EVP_sha256() ;
sub EVP_sha512() ;
sub FIPS_mode_set($) ;
sub IOV_MAX() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MD4($) ;
sub MD5($) ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub OBJ_cmp($$) ;
sub OBJ_dup($) ;
sub OBJ_ln2nid($) ;
sub OBJ_nid2ln($) ;
sub OBJ_nid2obj($) ;
sub OBJ_nid2sn($) ;
sub OBJ_obj2nid($) ;
sub OBJ_obj2txt($;$) ;
sub OBJ_sn2nid($) ;
sub OBJ_txt2nid($) ;
sub OBJ_txt2obj($;$) ;
sub OPENSSL_add_all_algorithms_conf() ;
sub OPENSSL_add_all_algorithms_noconf() ;
sub OpenSSL_add_all_algorithms() ;
sub OpenSSL_add_all_digests() ;
sub OpenSSL_add_ssl_algorithms() ;
sub PEM_get_string_PrivateKey($;$$) ;
sub PEM_get_string_X509($) ;
sub PEM_get_string_X509_CRL($) ;
sub PEM_get_string_X509_REQ($) ;
sub PEM_read_bio_DHparams($;$$$) ;
sub PEM_read_bio_PrivateKey($;$$) ;
sub PEM_read_bio_X509($;$$$) ;
sub PEM_read_bio_X509_CRL($;$$$) ;
sub PEM_read_bio_X509_REQ($;$$$) ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub P_ASN1_INTEGER_get_dec($) ;
sub P_ASN1_INTEGER_get_hex($) ;
sub P_ASN1_INTEGER_set_dec($$) ;
sub P_ASN1_INTEGER_set_hex($$) ;
sub P_ASN1_STRING_get($;$) ;
sub P_ASN1_TIME_get_isotime($) ;
sub P_ASN1_TIME_put2string($) ;
sub P_ASN1_TIME_set_isotime($$) ;
sub P_ASN1_UTCTIME_put2string($) ;
sub P_EVP_MD_list_all() ;
sub P_PKCS12_load_file($;$$) ;
sub P_X509_CRL_add_revoked_serial_hex($$$;$$) ;
sub P_X509_CRL_get_serial($) ;
sub P_X509_CRL_set_serial($$) ;
sub P_X509_REQ_add_extensions($;@) ;
sub P_X509_REQ_get_attr($$) ;
sub P_X509_add_extensions($$;@) ;
sub P_X509_copy_extensions($$;$) ;
sub P_X509_get_crl_distribution_points($) ;
sub P_X509_get_ext_key_usage($;$) ;
sub P_X509_get_key_usage($) ;
sub P_X509_get_netscape_cert_type($) ;
sub P_X509_get_pubkey_alg($) ;
sub P_X509_get_signature_alg($) ;
sub P_next_proto_last_status($) ;
sub P_next_proto_negotiated($) ;
sub RAND_add($$$) ;
sub RAND_bytes($$) ;
sub RAND_cleanup() ;
sub RAND_egd($) ;
sub RAND_egd_bytes($$) ;
sub RAND_file_name($) ;
sub RAND_load_file($$) ;
sub RAND_poll() ;
sub RAND_pseudo_bytes($$) ;
sub RAND_seed($) ;
sub RAND_status() ;
sub RAND_write_file($) ;
sub RIPEMD160($) ;
sub RSA_free($) ;
sub RSA_generate_key($$;$$) ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SESSION_free($) ;
sub SESSION_get_app_data($) ;
sub SESSION_get_ex_data($$) ;
sub SESSION_get_ex_new_index($$$$$) ;
sub SESSION_get_master_key($) ;
sub SESSION_get_time($) ;
sub SESSION_get_timeout($) ;
sub SESSION_new() ;
sub SESSION_print($$) ;
sub SESSION_print_fp($$) ;
sub SESSION_set_app_data($$) ;
sub SESSION_set_ex_data($$$) ;
sub SESSION_set_master_key($$) ;
sub SESSION_set_time($$) ;
sub SESSION_set_timeout($$) ;
sub SHA1($) ;
sub SHA256($) ;
sub SHA512($) ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub SSL_get0_session($) ;
sub SSLeay() ;
sub SSLeay_add_ssl_algorithms() ;
sub SSLeay_version(;$) ;
sub SSLv3_method() ;
sub TLSv1_method() ;
sub UIO_MAXIOV() ;
sub X509V3_EXT_d2i($) ;
sub X509V3_EXT_print($;$$) ;
sub X509_CRL_digest($$) ;
sub X509_CRL_free($) ;
sub X509_CRL_get_issuer($) ;
sub X509_CRL_get_lastUpdate($) ;
sub X509_CRL_get_nextUpdate($) ;
sub X509_CRL_get_version($) ;
sub X509_CRL_new() ;
sub X509_CRL_set_issuer_name($$) ;
sub X509_CRL_set_lastUpdate($$) ;
sub X509_CRL_set_nextUpdate($$) ;
sub X509_CRL_set_version($$) ;
sub X509_CRL_sign($$$) ;
sub X509_CRL_sort($) ;
sub X509_CRL_verify($$) ;
sub X509_EXTENSION_get_critical($) ;
sub X509_EXTENSION_get_data($) ;
sub X509_EXTENSION_get_object($) ;
sub X509_NAME_ENTRY_get_data($) ;
sub X509_NAME_ENTRY_get_object($) ;
sub X509_NAME_add_entry_by_NID($$$$;$$) ;
sub X509_NAME_add_entry_by_OBJ($$$$;$$) ;
sub X509_NAME_add_entry_by_txt($$$$;$$) ;
sub X509_NAME_cmp($$) ;
sub X509_NAME_digest($$) ;
sub X509_NAME_entry_count($) ;
sub X509_NAME_get_entry($$) ;
sub X509_NAME_get_text_by_NID($$) ;
sub X509_NAME_oneline($) ;
sub X509_NAME_print_ex($;$$) ;
sub X509_REQ_add1_attr_by_NID($$$$) ;
sub X509_REQ_digest($$) ;
sub X509_REQ_free($) ;
sub X509_REQ_get_attr_by_NID($$;$) ;
sub X509_REQ_get_attr_by_OBJ($$;$) ;
sub X509_REQ_get_attr_count($) ;
sub X509_REQ_get_pubkey($) ;
sub X509_REQ_get_subject_name($) ;
sub X509_REQ_get_version($) ;
sub X509_REQ_new() ;
sub X509_REQ_set_pubkey($$) ;
sub X509_REQ_set_subject_name($$) ;
sub X509_REQ_set_version($$) ;
sub X509_REQ_sign($$$) ;
sub X509_REQ_verify($$) ;
sub X509_STORE_CTX_get_current_cert($) ;
sub X509_STORE_CTX_get_error($) ;
sub X509_STORE_CTX_get_error_depth($) ;
sub X509_STORE_CTX_get_ex_data($$) ;
sub X509_STORE_CTX_set_cert($$) ;
sub X509_STORE_CTX_set_error($$) ;
sub X509_STORE_CTX_set_ex_data($$$) ;
sub X509_STORE_add_cert($$) ;
sub X509_STORE_add_crl($$) ;
sub X509_STORE_set1_param($$) ;
sub X509_STORE_set_flags($$) ;
sub X509_STORE_set_purpose($$) ;
sub X509_STORE_set_trust($$) ;
sub X509_VERIFY_PARAM_add0_policy($$) ;
sub X509_VERIFY_PARAM_add0_table($) ;
sub X509_VERIFY_PARAM_clear_flags($$) ;
sub X509_VERIFY_PARAM_free($) ;
sub X509_VERIFY_PARAM_get_depth($) ;
sub X509_VERIFY_PARAM_get_flags($) ;
sub X509_VERIFY_PARAM_inherit($$) ;
sub X509_VERIFY_PARAM_lookup($) ;
sub X509_VERIFY_PARAM_new() ;
sub X509_VERIFY_PARAM_set1($$) ;
sub X509_VERIFY_PARAM_set1_name($$) ;
sub X509_VERIFY_PARAM_set1_policies($$) ;
sub X509_VERIFY_PARAM_set_depth($$) ;
sub X509_VERIFY_PARAM_set_flags($$) ;
sub X509_VERIFY_PARAM_set_purpose($$) ;
sub X509_VERIFY_PARAM_set_time($$) ;
sub X509_VERIFY_PARAM_set_trust($$) ;
sub X509_VERIFY_PARAM_table_cleanup() ;
sub X509_certificate_type($;$) ;
sub X509_digest($$) ;
sub X509_free($) ;
sub X509_get_ext($$) ;
sub X509_get_ext_by_NID($$;$) ;
sub X509_get_ext_count($) ;
sub X509_get_fingerprint($$) ;
sub X509_get_issuer_name($) ;
sub X509_get_notAfter($) ;
sub X509_get_notBefore($) ;
sub X509_get_pubkey($) ;
sub X509_get_serialNumber($) ;
sub X509_get_subjectAltNames($) ;
sub X509_get_subject_name($) ;
sub X509_get_version($) ;
sub X509_gmtime_adj($$) ;
sub X509_issuer_and_serial_hash($) ;
sub X509_issuer_name_hash($) ;
sub X509_load_cert_crl_file($$$) ;
sub X509_load_cert_file($$$) ;
sub X509_load_crl_file($$$) ;
sub X509_new() ;
sub X509_policy_level_get0_node($$) ;
sub X509_policy_level_node_count($) ;
sub X509_policy_node_get0_parent($) ;
sub X509_policy_node_get0_policy($) ;
sub X509_policy_node_get0_qualifiers($) ;
sub X509_policy_tree_free($) ;
sub X509_policy_tree_get0_level($$) ;
sub X509_policy_tree_get0_policies($) ;
sub X509_policy_tree_get0_user_policies($) ;
sub X509_policy_tree_level_count($) ;
sub X509_pubkey_digest($$) ;
sub X509_set_issuer_name($$) ;
sub X509_set_pubkey($$) ;
sub X509_set_serialNumber($$) ;
sub X509_set_subject_name($$) ;
sub X509_set_version($$) ;
sub X509_sign($$$) ;
sub X509_subject_name_hash($) ;
sub X509_verify($$) ;
sub X509_verify_cert_error_string($) ;
sub accept($) ;
sub add_client_CA($$) ;
sub add_file_cert_subjects_to_stack($$) ;
sub add_ssl_algorithms() ;
sub alert_desc_string($) ;
sub alert_desc_string_long($) ;
sub alert_type_string($) ;
sub alert_type_string_long($) ;
sub callback_ctrl($$$) ;
sub check_private_key($) ;
sub clear($) ;
sub clear_num_renegotiations($) ;
sub connect($) ;
sub constant($) ;
sub copy_session_id($$) ;
sub ctrl($$$$) ;
sub d2i_SSL_SESSION($$$) ;
sub d2i_X509_CRL_bio($;$) ;
sub d2i_X509_REQ_bio($;$) ;
sub d2i_X509_bio($;$) ;
sub debug_read;
sub do_handshake($) ;
sub do_https2;
sub do_https3;
sub do_https4;
sub do_https;
sub do_httpx2;
sub do_httpx3;
sub do_httpx4;
sub dump_peer_certificate($) ;
sub dup($) ;
sub free($) ;
sub get1_session($) ;
sub get_SSL_CTX($) ;
sub get_app_data($) ;
sub get_certificate($) ;
sub get_cipher($) ;
sub get_cipher_bits($;$) ;
sub get_cipher_list($$) ;
sub get_client_CA_list($) ;
sub get_client_random($) ;
sub get_current_cipher($) ;
sub get_default_timeout($) ;
sub get_error($$) ;
sub get_ex_data($$) ;
sub get_ex_new_index($$$$$) ;
sub get_fd($) ;
sub get_finished($$$) ;
sub get_http3;
sub get_http4;
sub get_http;
sub get_https3;
sub get_https4;
sub get_https;
sub get_httpx3;
sub get_httpx4;
sub get_httpx;
sub get_keyblock_size($) ;
sub get_mode($) ;
sub get_options($) ;
sub get_peer_certificate($) ;
sub get_peer_finished($$$) ;
sub get_quiet_shutdown($) ;
sub get_rbio($) ;
sub get_read_ahead($) ;
sub get_server_random($) ;
sub get_servername($;$) ;
sub get_servername_type($) ;
sub get_session($) ;
sub get_shared_ciphers($;$$) ;
sub get_shutdown($) ;
sub get_ssl_method($) ;
sub get_state($) ;
sub get_time($) ;
sub get_timeout($) ;
sub get_verify_depth($) ;
sub get_verify_mode($) ;
sub get_verify_result($) ;
sub get_wbio($) ;
sub head_http3;
sub head_http4;
sub head_http;
sub head_https3;
sub head_https4;
sub head_https;
sub head_httpx3;
sub head_httpx4;
sub head_httpx;
sub hello() ;
sub http_cat;
sub https_cat;
sub httpx_cat;
sub i2d_SSL_SESSION($$) ;
sub inet_aton;
sub inet_ntoa;
sub initialize;
sub library_init() ;
sub load_client_CA_file($) ;
sub load_error_strings() ;
sub make_form;
sub make_headers;
sub need_tmp_RSA($) ;
sub new($) ;
sub new_x_ctx;
sub num_renegotiations($) ;
sub open_proxy_tcp_connection;
sub open_tcp_connection;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub peek($;$) ;
sub pending($) ;
sub post_http3;
sub post_http4;
sub post_http;
sub post_https3;
sub post_https4;
sub post_https;
sub post_httpx3;
sub post_httpx4;
sub post_httpx;
sub put_http3;
sub put_http4;
sub put_http;
sub put_https3;
sub put_https4;
sub put_https;
sub put_httpx3;
sub put_httpx4;
sub put_httpx;
sub randomize(;$$$) ;
sub read($;$) ;
sub renegotiate($) ;
sub rstate_string($) ;
sub rstate_string_long($) ;
sub session_reused($) ;
sub set1_param($$) ;
sub set_SSL_CTX($$) ;
sub set_accept_state($) ;
sub set_app_data($$) ;
sub set_bio($$$) ;
sub set_cert_and_key($$$) ;
sub set_cipher_list($$) ;
sub set_client_CA_list($$) ;
sub set_connect_state($) ;
sub set_ex_data($$$) ;
sub set_fd($$) ;
sub set_info_callback($$) ;
sub set_mode($$) ;
sub set_options($$) ;
sub set_pref_cipher($$) ;
sub set_proxy($$;**) ;
sub set_purpose($$) ;
sub set_quiet_shutdown($$) ;
sub set_read_ahead($;$) ;
sub set_rfd($$) ;
sub set_server_cert_and_key($$$) ;
sub set_session($$) ;
sub set_session_id_context($$$) ;
sub set_session_secret_cb($;$$) ;
sub set_shutdown($$) ;
sub set_ssl_method($$) ;
sub set_time($$) ;
sub set_timeout($$) ;
sub set_tlsext_host_name($$) ;
sub set_tmp_dh($$) ;
sub set_tmp_dh_callback($$) ;
sub set_tmp_rsa($$) ;
sub set_tmp_rsa_callback($$) ;
sub set_trust($$) ;
sub set_verify($$$) ;
sub set_verify_depth($$) ;
sub set_verify_result($$) ;
sub set_wfd($$) ;
sub shutdown($) ;
sub sk_X509_NAME_free($) ;
sub sk_X509_NAME_num($) ;
sub sk_X509_NAME_value($$) ;
sub sockaddr_family;
sub ssl_read_CRLF($;$) ;
sub ssl_read_all;
sub ssl_read_until($;$$) ;
sub ssl_write_CRLF($$) ;
sub ssl_write_all;
sub sslcat;
sub state($) ;
sub state_string($) ;
sub state_string_long($) ;
sub tcp_read_CRLF;
sub tcp_read_all;
sub tcp_read_until;
sub tcp_write_CRLF;
sub tcp_write_all;
sub tcpcat;
sub tcpxcat;
sub total_renegotiations($) ;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
sub use_PrivateKey($$) ;
sub use_PrivateKey_ASN1($$$$) ;
sub use_PrivateKey_file($$$) ;
sub use_RSAPrivateKey($$) ;
sub use_RSAPrivateKey_ASN1($$$) ;
sub use_RSAPrivateKey_file($$$) ;
sub use_certificate($$) ;
sub use_certificate_ASN1($$$) ;
sub use_certificate_file($$$) ;
sub version($) ;
sub want($) ;
sub want_X509_lookup;
sub want_nothing;
sub want_read;
sub want_write;
sub write($$) ;
sub write_partial($$$$) ;
}
package ODBM_File {
sub DELETE;
sub DESTROY;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
}
package Opcode {
sub _safe_call_sv($$$) ;
sub _safe_pkg_prep($) ;
sub define_optag($$) ;
sub deny($;@) ;
sub deny_only($;@) ;
sub empty_opset() ;
sub full_opset() ;
sub invert_opset($) ;
sub opcodes() ;
sub opdesc(;@) ;
sub opmask() ;
sub opmask_add($) ;
sub opset(;@) ;
sub opset_to_ops($;$) ;
sub permit($;@) ;
sub permit_only($;@) ;
sub verify_opset($;$) ;
}
package POSIX {
sub ARG_MAX() ;
sub B0() ;
sub B110() ;
sub B1200() ;
sub B134() ;
sub B150() ;
sub B1800() ;
sub B19200() ;
sub B200() ;
sub B2400() ;
sub B300() ;
sub B38400() ;
sub B4800() ;
sub B50() ;
sub B600() ;
sub B75() ;
sub B9600() ;
sub BRKINT() ;
sub CHILD_MAX() ;
sub CLOCAL() ;
sub CREAD() ;
sub CS5() ;
sub CS6() ;
sub CS7() ;
sub CS8() ;
sub CSIZE() ;
sub CSTOPB() ;
sub EAI_OVERFLOW() ;
sub EAI_SYSTEM() ;
sub ECHO() ;
sub ECHOE() ;
sub ECHOK() ;
sub ECHONL() ;
sub ENOTBLK() ;
sub ERESTART() ;
sub ETXTBSY() ;
sub FD_CLOEXEC() ;
sub F_DUPFD() ;
sub F_GETFD() ;
sub F_GETFL() ;
sub F_GETLK() ;
sub F_RDLCK() ;
sub F_SETFD() ;
sub F_SETFL() ;
sub F_SETLK() ;
sub F_SETLKW() ;
sub F_UNLCK() ;
sub F_WRLCK() ;
sub HUPCL() ;
sub ICANON() ;
sub ICRNL() ;
sub IEXTEN() ;
sub IGNBRK() ;
sub IGNCR() ;
sub IGNPAR() ;
sub INLCR() ;
sub INPCK() ;
sub ISIG() ;
sub ISTRIP() ;
sub IXOFF() ;
sub IXON() ;
sub LC_MESSAGES() ;
sub LDBL_EPSILON() ;
sub LDBL_MAX() ;
sub LDBL_MIN() ;
sub LINK_MAX() ;
sub L_ctermid() ;
sub L_cuserid() ;
sub L_tmpname() ;
sub MAX_CANON() ;
sub MAX_INPUT() ;
sub MSG_CTRUNC() ;
sub MSG_EOR() ;
sub MSG_TRUNC() ;
sub NAME_MAX() ;
sub NCCS() ;
sub NGROUPS_MAX() ;
sub NOFLSH() ;
sub OPEN_MAX() ;
sub OPOST() ;
sub O_NOCTTY() ;
sub O_NONBLOCK() ;
sub PARENB() ;
sub PARMRK() ;
sub PARODD() ;
sub PIPE_BUF() ;
sub SA_NOCLDSTOP() ;
sub SA_NOCLDWAIT() ;
sub SA_NODEFER() ;
sub SA_ONSTACK() ;
sub SA_RESETHAND() ;
sub SA_RESTART() ;
sub SA_SIGINFO() ;
sub SIGALRM() ;
sub SIGBUS() ;
sub SIGCHLD() ;
sub SIGCONT() ;
sub SIGHUP() ;
sub SIGKILL() ;
sub SIGPIPE() ;
sub SIGPOLL() ;
sub SIGPROF() ;
sub SIGQUIT() ;
sub SIGRTMAX() ;
sub SIGRTMIN() ;
sub SIGSTOP() ;
sub SIGSYS() ;
sub SIGTRAP() ;
sub SIGTSTP() ;
sub SIGTTIN() ;
sub SIGTTOU() ;
sub SIGURG() ;
sub SIGUSR1() ;
sub SIGUSR2() ;
sub SIGVTALRM() ;
sub SIGXCPU() ;
sub SIGXFSZ() ;
sub SIG_BLOCK() ;
sub SIG_SETMASK() ;
sub SIG_UNBLOCK() ;
sub STREAM_MAX() ;
sub S_ISBLK;
sub S_ISCHR;
sub S_ISDIR;
sub S_ISFIFO;
sub S_ISREG;
sub TCIFLUSH() ;
sub TCIOFF() ;
sub TCIOFLUSH() ;
sub TCION() ;
sub TCOFLUSH() ;
sub TCOOFF() ;
sub TCOON() ;
sub TCSADRAIN() ;
sub TCSAFLUSH() ;
sub TCSANOW() ;
sub TOSTOP() ;
sub TZNAME_MAX() ;
sub VEOF() ;
sub VEOL() ;
sub VERASE() ;
sub VINTR() ;
sub VKILL() ;
sub VMIN() ;
sub VQUIT() ;
sub VSTART() ;
sub VSTOP() ;
sub VSUSP() ;
sub VTIME() ;
sub WEXITSTATUS;
sub WIFEXITED;
sub WIFSIGNALED;
sub WIFSTOPPED;
sub WSTOPSIG;
sub WTERMSIG;
sub WUNTRACED() ;
sub _PC_CHOWN_RESTRICTED() ;
sub _PC_LINK_MAX() ;
sub _PC_MAX_CANON() ;
sub _PC_MAX_INPUT() ;
sub _PC_NAME_MAX() ;
sub _PC_NO_TRUNC() ;
sub _PC_PATH_MAX() ;
sub _PC_PIPE_BUF() ;
sub _PC_VDISABLE() ;
sub _SC_ARG_MAX() ;
sub _SC_CHILD_MAX() ;
sub _SC_CLK_TCK() ;
sub _SC_JOB_CONTROL() ;
sub _SC_NGROUPS_MAX() ;
sub _SC_OPEN_MAX() ;
sub _SC_PAGESIZE() ;
sub _SC_SAVED_IDS() ;
sub _SC_STREAM_MAX() ;
sub _SC_TZNAME_MAX() ;
sub _SC_VERSION() ;
sub _exit;
sub abort;
sub abs;
sub access;
sub acos;
sub alarm;
sub asctime;
sub asin;
sub assert;
sub atan2;
sub atan;
sub atexit;
sub atof;
sub atoi;
sub atol;
sub bsearch;
sub calloc;
sub ceil;
sub chdir;
sub chmod;
sub chown;
sub clearerr;
sub clock;
sub close;
sub closedir;
sub constant;
sub cos;
sub cosh;
sub creat;
sub ctermid;
sub ctime;
sub cuserid;
sub difftime;
sub div;
sub dup2;
sub dup;
sub errno;
sub execl;
sub execle;
sub execlp;
sub execv;
sub execve;
sub execvp;
sub exit;
sub exp;
sub fabs;
sub fclose;
sub fcntl;
sub fdopen;
sub feof;
sub ferror;
sub fflush;
sub fgetc;
sub fgetpos;
sub fgets;
sub fileno;
sub floor;
sub fmod;
sub fopen;
sub fork;
sub fpathconf;
sub fprintf;
sub fputc;
sub fputs;
sub fread;
sub free;
sub freopen;
sub frexp;
sub fscanf;
sub fseek;
sub fsetpos;
sub fstat;
sub fsync;
sub ftell;
sub fwrite;
sub getc;
sub getchar;
sub getcwd;
sub getegid;
sub getenv;
sub geteuid;
sub getgid;
sub getgrgid;
sub getgrnam;
sub getgroups;
sub getlogin;
sub getpgrp;
sub getpid;
sub getppid;
sub getpwnam;
sub getpwuid;
sub gets;
sub getuid;
sub gmtime;
sub isalnum;
sub isalpha;
sub isatty;
sub iscntrl;
sub isdigit;
sub isgraph;
sub islower;
sub isprint;
sub ispunct;
sub isspace;
sub isupper;
sub isxdigit;
sub kill;
sub labs;
sub lchown;
sub ldexp;
sub ldiv;
sub link;
sub localeconv;
sub localtime;
sub log10;
sub log;
sub longjmp;
sub lseek;
sub malloc;
sub mblen;
sub mbstowcs;
sub mbtowc;
sub memchr;
sub memcmp;
sub memcpy;
sub memmove;
sub memset;
sub mkdir;
sub mkfifo;
sub mktime;
sub modf;
sub nice;
sub offsetof;
sub open;
sub opendir;
sub pathconf;
sub pause;
sub pipe;
sub pow;
sub putc;
sub putchar;
sub puts;
sub qsort;
sub raise;
sub rand;
sub read;
sub readdir;
sub realloc;
sub remove;
sub rename;
sub rewind;
sub rewinddir;
sub rmdir;
sub scanf;
sub setbuf;
sub setgid;
sub setjmp;
sub setlocale;
sub setpgid;
sub setsid;
sub setuid;
sub setvbuf;
sub sigaction;
sub siglongjmp;
sub sigpending;
sub sigprocmask;
sub sigsetjmp;
sub sigsuspend;
sub sin;
sub sinh;
sub sleep;
sub sqrt;
sub srand;
sub sscanf;
sub stat;
sub strcat;
sub strchr;
sub strcmp;
sub strcoll;
sub strcpy;
sub strcspn;
sub strerror;
sub strftime;
sub strlen;
sub strncat;
sub strncmp;
sub strncpy;
sub strpbrk;
sub strrchr;
sub strspn;
sub strstr;
sub strtod;
sub strtok;
sub strtol;
sub strtoul;
sub strxfrm;
sub sysconf;
sub system;
sub tan;
sub tanh;
sub tcdrain;
sub tcflow;
sub tcflush;
sub tcgetpgrp;
sub tcsendbreak;
sub tcsetpgrp;
sub time;
sub times;
sub tmpfile;
sub tmpnam;
sub tolower;
sub toupper;
sub ttyname;
sub tzname;
sub tzset;
sub umask;
sub uname;
sub ungetc;
sub unlink;
sub utime;
sub vfprintf;
sub vprintf;
sub vsprintf;
sub wait;
sub waitpid;
sub wcstombs;
sub wctomb;
sub write;
}
package POSIX::SigSet {
sub addset;
sub delset;
sub emptyset;
sub fillset;
sub ismember;
sub new;
}
package POSIX::Termios {
sub getattr;
sub getcc;
sub getcflag;
sub getiflag;
sub getispeed;
sub getlflag;
sub getoflag;
sub getospeed;
sub new;
sub setattr;
sub setcc;
sub setcflag;
sub setiflag;
sub setispeed;
sub setlflag;
sub setoflag;
sub setospeed;
}
package Package::DeprecationManager {
sub _HASH0($) ;
sub any(&@) ;
}
package Package::Stash {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Package::Stash::XS {
sub add_symbol;
sub get_all_symbols;
sub get_or_add_symbol;
sub get_symbol;
sub has_symbol;
sub list_all_symbols;
sub name;
sub namespace;
sub new;
sub remove_glob;
sub remove_symbol;
}
package Params::Util {
sub _ARRAY($) ;
sub _ARRAY0($) ;
sub _ARRAYLIKE($) ;
sub _CODE($) ;
sub _CODELIKE($) ;
sub _HASH($) ;
sub _HASH0($) ;
sub _HASHLIKE($) ;
sub _INSTANCE($$) ;
sub _NUMBER($) ;
sub _REGEX($) ;
sub _SCALAR($) ;
sub _SCALAR0($) ;
sub _STRING($) ;
sub looks_like_number($) ;
}
package Params::Validate {
sub validate(\@$) ;
sub validate_pos(\@@) ;
sub validate_with;
}
package Params::Validate::XS {
sub validate(\@$) ;
sub validate_pos(\@@) ;
sub validate_with;
}
package PerlIO {
sub get_layers(*;@) ;
}
package PerlIO::Layer {
sub NoWarnings;
sub find;
}
package Regexp {
sub DESTROY() ;
}
package SDBM_File {
sub DELETE;
sub DESTROY;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub STORE;
sub TIEHASH;
sub error;
sub filter_fetch_key;
sub filter_fetch_value;
sub filter_store_key;
sub filter_store_value;
sub sdbm_clearerr;
}
package Scalar::Util {
sub blessed($) ;
sub dualvar($$) ;
sub isdual($) ;
sub isvstring($) ;
sub isweak($) ;
sub looks_like_number($) ;
sub openhandle($) ;
sub readonly($) ;
sub refaddr($) ;
sub reftype($) ;
sub set_prototype(&$) ;
sub tainted($) ;
sub weaken($) ;
}
package Socket {
sub AF_802() ;
sub AF_AAL() ;
sub AF_CTF() ;
sub AF_GOSIP() ;
sub AF_KEY() ;
sub AF_LAST() ;
sub AF_LINK() ;
sub AF_NBS() ;
sub AF_NIT() ;
sub AF_OSINET() ;
sub AF_ROUTE() ;
sub AF_USER() ;
sub AF_WAN() ;
sub AF_X25() ;
sub AI_ADDRCONFIG() ;
sub AI_ALL() ;
sub AI_CANONIDN() ;
sub AI_IDN() ;
sub AI_IDN_ALLOW_UNASSIGNED() ;
sub AI_IDN_USE_STD3_ASCII_RULES() ;
sub AI_NUMERICSERV() ;
sub AI_V4MAPPED() ;
sub AUTOLOAD;
sub EAI_ADDRFAMILY() ;
sub EAI_BADHINTS() ;
sub EAI_PROTOCOL() ;
sub EAI_SYSTEM() ;
sub IOV_MAX() ;
sub IPV6_MTU() ;
sub IPV6_MTU_DISCOVER() ;
sub IPV6_V6ONLY() ;
sub IP_RECVOPTS() ;
sub IP_RECVRETOPTS() ;
sub IP_RETOPTS() ;
sub MSG_BCAST() ;
sub MSG_BTAG() ;
sub MSG_CTLFLAGS() ;
sub MSG_CTLIGNORE() ;
sub MSG_CTRUNC() ;
sub MSG_DONTWAIT() ;
sub MSG_EOF() ;
sub MSG_EOR() ;
sub MSG_ERRQUEUE() ;
sub MSG_ETAG() ;
sub MSG_FIN() ;
sub MSG_MCAST() ;
sub MSG_NOSIGNAL() ;
sub MSG_PROXY() ;
sub MSG_RST() ;
sub MSG_SYN() ;
sub MSG_TRUNC() ;
sub MSG_URG() ;
sub MSG_WIRE() ;
sub NI_IDN() ;
sub NI_IDN_ALLOW_UNASSIGNED() ;
sub NI_IDN_USE_STD3_ASCII_RULES() ;
sub PF_802() ;
sub PF_AAL() ;
sub PF_CTF() ;
sub PF_GOSIP() ;
sub PF_KEY() ;
sub PF_LAST() ;
sub PF_LINK() ;
sub PF_NBS() ;
sub PF_NIT() ;
sub PF_OSINET() ;
sub PF_ROUTE() ;
sub PF_USER() ;
sub PF_WAN() ;
sub PF_X25() ;
sub SCM_CONNECT() ;
sub SCM_CREDENTIALS() ;
sub SCM_CREDS() ;
sub SCM_RIGHTS() ;
sub SCM_TIMESTAMP() ;
sub SOCK_CLOEXEC() ;
sub SOCK_NONBLOCK() ;
sub SO_ATTACH_FILTER() ;
sub SO_BACKLOG() ;
sub SO_CHAMELEON() ;
sub SO_DETACH_FILTER() ;
sub SO_DGRAM_ERRIND() ;
sub SO_DOMAIN() ;
sub SO_FAMILY() ;
sub SO_PASSCRED() ;
sub SO_PASSIFNAME() ;
sub SO_PEERCRED() ;
sub SO_PROTOCOL() ;
sub SO_PROTOTYPE() ;
sub SO_REUSEPORT() ;
sub SO_SECURITY_AUTHENTICATION() ;
sub SO_SECURITY_ENCRYPTION_NETWORK() ;
sub SO_SECURITY_ENCRYPTION_TRANSPORT() ;
sub SO_STATE() ;
sub SO_XOPEN() ;
sub SO_XSE() ;
sub TCP_CONGESTION() ;
sub TCP_CONNECTIONTIMEOUT() ;
sub TCP_CORK() ;
sub TCP_DEFER_ACCEPT() ;
sub TCP_INFO() ;
sub TCP_INIT_CWND() ;
sub TCP_KEEPALIVE() ;
sub TCP_KEEPCNT() ;
sub TCP_KEEPIDLE() ;
sub TCP_KEEPINTVL() ;
sub TCP_LINGER2() ;
sub TCP_MAXRT() ;
sub TCP_MAXSEG() ;
sub TCP_MD5SIG() ;
sub TCP_NOOPT() ;
sub TCP_NOPUSH() ;
sub TCP_QUICKACK() ;
sub TCP_SACK_ENABLE() ;
sub TCP_STDURG() ;
sub TCP_SYNCNT() ;
sub TCP_WINDOW_CLAMP() ;
sub UIO_MAXIOV() ;
sub getaddrinfo;
sub getnameinfo;
sub inet_aton;
sub inet_ntoa;
sub inet_ntop;
sub inet_pton;
sub pack_ip_mreq;
sub pack_ip_mreq_source;
sub pack_ipv6_mreq;
sub pack_sockaddr_in6;
sub pack_sockaddr_in;
sub pack_sockaddr_un;
sub sockaddr_family;
sub unpack_ip_mreq;
sub unpack_ip_mreq_source;
sub unpack_ipv6_mreq;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in;
sub unpack_sockaddr_un;
}
package Socket6 {
sub constant;
sub gai_strerror;
sub getaddrinfo;
sub gethostbyname2;
sub getipnodebyaddr;
sub getipnodebyname;
sub getnameinfo;
sub in6addr_any;
sub in6addr_loopback;
sub inet_ntop;
sub inet_pton;
sub pack_sockaddr_in6;
sub pack_sockaddr_in6_all;
sub unpack_sockaddr_in6;
sub unpack_sockaddr_in6_all;
}
package Storable {
sub dclone($) ;
sub init_perinterp() ;
sub is_retrieving() ;
sub is_storing() ;
sub last_op_in_netorder() ;
sub mretrieve($) ;
sub mstore($) ;
sub net_mstore($) ;
sub net_pstore($$) ;
sub pretrieve($) ;
sub pstore($$) ;
}
package Storable::Cxt {
sub DESTROY;
}
package String::CRC32 {
sub crc32;
}
package Sub::Exporter::Progressive {
sub first(&@) ;
}
package Sub::Name {
sub subname;
}
package Sys::Hostname {
sub ghname;
}
package Template {
sub blessed($) ;
}
package Template::Document {
sub is_utf8;
}
package Template::Filters {
sub blessed($) ;
}
package Template::Service {
sub blessed($) ;
}
package Template::Stash {
sub blessed($) ;
sub reftype($) ;
}
package Template::Stash::XS {
sub get;
sub set;
}
package Template::VMethods {
sub blessed($) ;
sub looks_like_number($) ;
}
package Term::ReadKey {
sub GetControlChars;
sub GetSpeed;
sub GetTermSizeGSIZE;
sub GetTermSizeGWINSZ;
sub GetTermSizeVIO;
sub GetTermSizeWin32;
sub SetControlChars;
sub SetReadMode;
sub SetTerminalSize;
sub Win32PeekChar;
sub blockoptions;
sub pollfile;
sub selectfile;
sub setnodelay;
sub termoptions;
sub termsizeoptions;
}
package Text::Soundex {
sub soundex;
sub soundex_xs;
}
package Tie::Hash::NamedCapture {
sub CLEAR;
sub DELETE;
sub EXISTS;
sub FETCH;
sub FIRSTKEY;
sub NEXTKEY;
sub SCALAR;
sub STORE;
sub TIEHASH;
sub flags;
}
package Time::HiRes {
sub CLONE(;@) ;
sub alarm($;$) ;
sub clock() ;
sub clock_getres(;$) ;
sub clock_gettime(;$) ;
sub clock_nanosleep($$;$) ;
sub constant($) ;
sub gettimeofday() ;
sub nanosleep($) ;
sub sleep(;@) ;
sub stat(;$) ;
sub time() ;
sub ualarm($;$) ;
sub usleep($) ;
}
package Time::Piece {
sub _crt_gmtime($) ;
sub _crt_localtime($) ;
sub _mini_mktime($$$$$$) ;
sub _strftime($$$$$$$;$$$) ;
sub _strptime($$) ;
sub _tzset() ;
}
package UNIVERSAL {
sub DOES;
sub VERSION;
sub can;
sub isa;
}
package Unicode::Collate {
sub _decompHangul;
sub _derivCE_14;
sub _derivCE_18;
sub _derivCE_20;
sub _derivCE_22;
sub _derivCE_24;
sub _derivCE_8;
sub _derivCE_9;
sub _exists_simple;
sub _fetch_rest;
sub _fetch_simple;
sub _getHexArray;
sub _ignorable_simple;
sub _isIllegal;
sub _isNonchar;
sub _isUIdeo;
sub _uideoCE_8;
sub getHST;
sub mk_SortKey;
sub unpack_U;
sub varCE;
sub visualizeSortKey;
}
package Unicode::Normalize {
sub FCC($) ;
sub NFC($) ;
sub NFD($) ;
sub NFKC($) ;
sub NFKD($) ;
sub checkFCC($) ;
sub checkFCD($) ;
sub checkNFC($) ;
sub checkNFD($) ;
sub checkNFKC($) ;
sub checkNFKD($) ;
sub compose($) ;
sub composeContiguous($) ;
sub decompose($;$) ;
sub getCanon($) ;
sub getCombinClass($) ;
sub getCompat($) ;
sub getComposite($$) ;
sub isComp2nd($) ;
sub isComp_Ex($) ;
sub isExclusion($) ;
sub isNFC_MAYBE($) ;
sub isNFC_NO($) ;
sub isNFD_NO($) ;
sub isNFKC_MAYBE($) ;
sub isNFKC_NO($) ;
sub isNFKD_NO($) ;
sub isNonStDecomp($) ;
sub isSingleton($) ;
sub reorder($) ;
sub splitOnLastStarter;
}
package Variable::Magic {
sub CLONE;
sub _wizard;
sub cast(\[$@%&*]$@) ;
sub dispell(\[$@%&*]$) ;
sub getdata(\[$@%&*]$) ;
}
package Win32 {
sub AbortSystemShutdown;
sub CopyFile;
sub CreateDirectory;
sub CreateFile;
sub DomainName;
sub ExpandEnvironmentStrings;
sub FormatMessage;
sub FreeLibrary;
sub FsType;
sub GetACP;
sub GetANSIPathName;
sub GetArchName;
sub GetChipName;
sub GetConsoleCP;
sub GetConsoleOutputCP;
sub GetCurrentProcessId;
sub GetCurrentThreadId;
sub GetCwd;
sub GetFileVersion;
sub GetFolderPath;
sub GetFullPathName;
sub GetLastError;
sub GetLongPathName;
sub GetNextAvailDrive;
sub GetOEMCP;
sub GetOSVersion;
sub GetProcAddress;
sub GetProductInfo;
sub GetShortPathName;
sub GetSystemMetrics;
sub GetTickCount;
sub GuidGen;
sub InitiateSystemShutdown;
sub IsAdminUser;
sub IsWin95;
sub IsWinNT;
sub LoadLibrary;
sub LoginName;
sub LookupAccountName;
sub LookupAccountSID;
sub MsgBox;
sub NodeName;
sub OutputDebugString;
sub RegisterServer;
sub SetChildShowWindow;
sub SetConsoleCP;
sub SetConsoleOutputCP;
sub SetCwd;
sub SetLastError;
sub Sleep;
sub Spawn;
sub UnregisterServer;
}
package Win32::API {
sub Call;
sub FreeLibrary;
sub FromUnicode;
sub GetModuleFileName;
sub GetProcAddress;
sub IsBadReadPtr;
sub IsBadStringPtr;
sub LoadLibrary;
sub MoveMemory;
sub PointerAt;
sub PointerTo;
sub ReadMemory;
sub SafeReadWideCString;
sub ToUnicode;
sub WriteMemory;
sub looks_like_number($) ;
}
package Win32::API::Callback {
sub IsBadStringPtr;
sub MakeParamArr;
sub PackedRVTarget;
sub WriteMemory;
}
package Win32::API::Callback::HeapBlock {
sub DESTROY;
sub new;
}
package Win32::API::Callback::IATPatch {
sub CLONE_SKIP;
sub DESTROY;
sub GetOriginalFunctionPtr;
sub Unpatch;
sub new;
}
package Win32::Console::ANSI {
sub Cls() ;
sub Cursor(;@) ;
sub MinimizeAll() ;
sub ScriptCP(;@) ;
sub SetCloseButton($) ;
sub SetConsoleFullScreen($) ;
sub SetConsoleSize($$) ;
sub SetMonitorState($) ;
sub ShowConsoleWindow($) ;
sub Title(;@) ;
sub XYMax() ;
sub _ScreenDump() ;
sub _chcp($$) ;
}
package Win32::EventLog {
sub BackupEventLog;
sub ClearEventLog;
sub CloseEventLog;
sub DeregisterEventSource;
sub GetEventLogText;
sub GetNumberOfEventLogRecords;
sub GetOldestEventLogRecord;
sub OpenBackupEventLog;
sub OpenEventLog;
sub ReadEventLog;
sub RegisterEventSource;
sub WriteEventLog;
sub constant;
}
package Win32::Exe::InsertResourceSection {
sub _insert_resource_section;
}
package Win32::File {
sub GetAttributes($$) ;
sub SetAttributes($$) ;
sub constant($) ;
}
package Win32::OLE {
sub DESTROY;
sub Dispatch;
sub EnumAllObjects;
sub Forward;
sub FreeUnusedLibraries;
sub GetActiveObject;
sub GetIDsOfNames;
sub GetObject;
sub GetTypeInfo;
sub Initialize;
sub MessageLoop;
sub QueryInterface;
sub QueryObjectType;
sub QuitMessageLoop;
sub SpinMessageLoop;
sub Uninitialize;
sub WithEvents;
sub _Unique;
sub new;
}
package Win32::OLE::Const {
sub _Constants;
sub _LoadRegTypeLib;
sub _ShowHelpContext;
sub _Typelibs;
}
package Win32::OLE::Enum {
sub All;
sub Clone;
sub DESTROY;
sub Next;
sub Reset;
sub Skip;
sub new;
}
package Win32::OLE::NLS {
sub CompareString;
sub GetLocaleInfo;
sub GetStringType;
sub GetSystemDefaultLCID;
sub GetSystemDefaultLangID;
sub GetUserDefaultLCID;
sub GetUserDefaultLangID;
sub LCMapString;
sub SendSettingChange;
sub SetLocaleInfo;
}
package Win32::OLE::Tie {
sub DESTROY;
sub FIRSTENUM;
sub FIRSTKEY;
sub Fetch;
sub NEXTENUM;
sub NEXTKEY;
sub Store;
}
package Win32::OLE::TypeInfo {
sub DESTROY;
sub GetContainingTypeLib;
sub _GetDocumentation;
sub _GetFuncDesc;
sub _GetImplTypeFlags;
sub _GetImplTypeInfo;
sub _GetNames;
sub _GetTypeAttr;
sub _GetVarDesc;
sub _new;
}
package Win32::OLE::TypeLib {
sub DESTROY;
sub GetTypeInfo;
sub _GetDocumentation;
sub _GetLibAttr;
sub _GetTypeInfo;
sub _GetTypeInfoCount;
sub new;
}
package Win32::OLE::Variant {
sub As;
sub ChangeType;
sub Copy;
sub Currency;
sub DESTROY;
sub Date;
sub Dim;
sub Get;
sub IsNothing;
sub IsNullString;
sub LastError;
sub Number;
sub Put;
sub Time;
sub Type;
sub Unicode;
sub Value;
sub _Clone;
sub _RefType;
sub _Value;
sub new;
}
package Win32::Pipe {
sub Info;
sub PipeBufferSize;
sub PipeClose;
sub PipeConnect;
sub PipeCreate;
sub PipeDisconnect;
sub PipeError;
sub PipeRead;
sub PipeResizeBuffer;
sub PipeWrite;
sub constant;
}
package Win32::Process {
sub Create;
sub DESTROY;
sub GetCurrentProcessID;
sub GetExitCode;
sub GetPriorityClass;
sub GetProcessAffinityMask;
sub GetProcessID;
sub Kill;
sub KillProcess;
sub Open;
sub Resume;
sub SetPriorityClass;
sub SetProcessAffinityMask;
sub Suspend;
sub Wait;
sub constant;
sub get_Win32_IPC_HANDLE;
sub get_process_handle;
}
package Win32::UTCFileTime {
sub CLONE(;@) ;
sub _alt_stat($) ;
sub _get_utc_file_times($) ;
sub _set_error_mode($) ;
sub _set_utc_file_times($$$) ;
sub constant($) ;
}
package Win32::WinError {
sub constant;
}
package Win32API::File {
sub CloseHandle;
sub CopyFileA;
sub CopyFileW;
sub CreateFileA;
sub CreateFileW;
sub DefineDosDeviceA;
sub DefineDosDeviceW;
sub DeleteFileA;
sub DeleteFileW;
sub DeviceIoControl;
sub FdGetOsFHandle;
sub GetDriveTypeA;
sub GetDriveTypeW;
sub GetFileAttributesA;
sub GetFileAttributesW;
sub GetFileSize;
sub GetFileType;
sub GetHandleInformation;
sub GetLogicalDriveStringsA;
sub GetLogicalDriveStringsW;
sub GetLogicalDrives;
sub GetOverlappedResult;
sub GetStdHandle;
sub GetVolumeInformationA;
sub GetVolumeInformationW;
sub IsContainerPartition;
sub IsRecognizedPartition;
sub MoveFileA;
sub MoveFileExA;
sub MoveFileExW;
sub MoveFileW;
sub OsFHandleOpenFd;
sub QueryDosDeviceA;
sub QueryDosDeviceW;
sub ReadFile;
sub SetErrorMode;
sub SetFilePointer;
sub SetHandleInformation;
sub SetStdHandle;
sub WriteFile;
sub _fileLastError;
}
package Win32API::Registry {
sub AbortSystemShutdownA;
sub AbortSystemShutdownW;
sub AllowPriv;
sub InitiateSystemShutdownA;
sub InitiateSystemShutdownW;
sub RegCloseKey;
sub RegConnectRegistryA;
sub RegConnectRegistryW;
sub RegCreateKeyA;
sub RegCreateKeyExA;
sub RegCreateKeyExW;
sub RegCreateKeyW;
sub RegDeleteKeyA;
sub RegDeleteKeyW;
sub RegDeleteValueA;
sub RegDeleteValueW;
sub RegFlushKey;
sub RegLoadKeyA;
sub RegLoadKeyW;
sub RegNotifyChangeKeyValue;
sub RegOpenKeyA;
sub RegOpenKeyExA;
sub RegOpenKeyExW;
sub RegOpenKeyW;
sub RegReplaceKeyA;
sub RegReplaceKeyW;
sub RegRestoreKeyA;
sub RegRestoreKeyW;
sub RegSaveKeyA;
sub RegSaveKeyW;
sub RegSetKeySecurity;
sub RegUnLoadKeyA;
sub RegUnLoadKeyW;
sub _RegEnumKeyA;
sub _RegEnumKeyExA;
sub _RegEnumKeyExW;
sub _RegEnumKeyW;
sub _RegEnumValueA;
sub _RegEnumValueW;
sub _RegGetKeySecurity;
sub _RegQueryInfoKeyA;
sub _RegQueryInfoKeyW;
sub _RegQueryMultipleValuesA;
sub _RegQueryMultipleValuesW;
sub _RegQueryValueA;
sub _RegQueryValueExA;
sub _RegQueryValueExW;
sub _RegQueryValueW;
sub _RegSetValueA;
sub _RegSetValueExA;
sub _RegSetValueExW;
sub _RegSetValueW;
sub _regLastError;
}
package XML::LibXML {
sub AUTOLOAD;
sub DISABLE_THREAD_SUPPORT;
sub HAVE_READER;
sub HAVE_SCHEMAS;
sub HAVE_STRUCT_ERRORS;
sub HAVE_THREAD_SUPPORT;
sub INIT_THREAD_SUPPORT;
sub LIBXML_DOTTED_VERSION;
sub LIBXML_RUNTIME_VERSION;
sub LIBXML_VERSION;
sub _CLONE;
sub _default_catalog;
sub _dump_registry;
sub _end_push;
sub _end_sax_push;
sub _externalEntityLoader;
sub _leaked_nodes;
sub _parse_fh;
sub _parse_file;
sub _parse_html_fh;
sub _parse_html_file;
sub _parse_html_string;
sub _parse_sax_fh;
sub _parse_sax_file;
sub _parse_sax_string;
sub _parse_sax_xml_chunk;
sub _parse_string;
sub _parse_xml_chunk;
sub _processXIncludes;
sub _push;
sub _start_push;
sub decodeFromUTF8;
sub encodeToUTF8;
sub export_GDOME;
sub import_GDOME;
sub load_catalog;
}
package XML::LibXML::Attr {
sub _setNamespace;
sub getNextSibling;
sub getOwnerElement;
sub getParentNode;
sub getPreviousSibling;
sub getValue;
sub isId;
sub name;
sub new;
sub nextSibling;
sub ownerElement;
sub parentElement;
sub previousSibling;
sub serialize;
sub serializeContent;
sub setValue;
sub toString;
sub value;
}
package XML::LibXML::CDATASection {
sub new;
}
package XML::LibXML::Comment {
sub new;
}
package XML::LibXML::Common {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXML::Devel {
sub fix_owner;
sub mem_used;
sub node_from_perl;
sub node_to_perl;
sub refcnt;
sub refcnt_dec;
sub refcnt_inc;
}
package XML::LibXML::Document {
sub URI;
sub _setDocumentElement;
sub _toString;
sub adoptNode;
sub cloneNode;
sub compression;
sub createAttribute;
sub createAttributeNS;
sub createCDATASection;
sub createComment;
sub createDTD;
sub createDocument;
sub createDocumentFragment;
sub createElement;
sub createElementNS;
sub createEntityReference;
sub createExternalSubset;
sub createInternalSubset;
sub createPI;
sub createProcessingInstruction;
sub createRawElement;
sub createRawElementNS;
sub createTextNode;
sub documentElement;
sub documentURI;
sub encoding;
sub externalSubset;
sub getDocumentElement;
sub getElementById;
sub getElementsById;
sub getEncoding;
sub getVersion;
sub importNode;
sub indexElements;
sub internalSubset;
sub is_valid;
sub new;
sub removeExternalSubset;
sub removeInternalSubset;
sub serialize_html;
sub setCompression;
sub setEncoding;
sub setExternalSubset;
sub setInternalSubset;
sub setStandalone;
sub setURI;
sub setVersion;
sub standalone;
sub toFH;
sub toFile;
sub toStringHTML;
sub validate;
sub version;
sub xmlEncoding;
sub xmlStandalone;
sub xmlVersion;
}
package XML::LibXML::DocumentFragment {
sub addNewChild;
sub appendText;
sub appendTextNode;
sub new;
}
package XML::LibXML::Dtd {
sub getPublicId;
sub getSystemId;
sub new;
sub parse_string;
sub parse_uri;
sub publicId;
sub systemId;
}
package XML::LibXML::Element {
sub _getAttribute;
sub _getAttributeNS;
sub _getNamespaceDeclURI;
sub _setAttribute;
sub _setAttributeNS;
sub _setNamespace;
sub addNewChild;
sub appendText;
sub appendTextChild;
sub appendTextNode;
sub blessed($) ;
sub getAttributeNode;
sub getAttributeNodeNS;
sub hasAttribute;
sub hasAttributeNS;
sub new;
sub removeAttribute;
sub removeAttributeNS;
sub removeAttributeNode;
sub setAttributeNode;
sub setAttributeNodeNS;
sub setNamespaceDeclPrefix;
sub setNamespaceDeclURI;
sub tagName;
}
package XML::LibXML::HashTable {
sub DESTROY;
sub new;
}
package XML::LibXML::InputCallback {
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
}
package XML::LibXML::LibError {
sub code;
sub context_and_column;
sub domain;
sub file;
sub int1;
sub int2;
sub level;
sub line;
sub message;
sub num1;
sub num2;
sub str1;
sub str2;
sub str3;
}
package XML::LibXML::Namespace {
sub DESTROY;
sub _isEqual;
sub declaredPrefix;
sub declaredURI;
sub getData;
sub getLocalName;
sub getType;
sub getValue;
sub href;
sub localname;
sub new;
sub nodeType;
sub nodeValue;
sub value2;
sub value;
}
package XML::LibXML::Node {
sub DESTROY;
sub _attributes;
sub _childNodes;
sub _find;
sub _findnodes;
sub _getChildrenByTagNameNS;
sub _toStringC14N;
sub addChild;
sub addSibling;
sub appendChild;
sub baseURI;
sub cloneNode;
sub firstChild;
sub firstNonBlankChild;
sub getAttributes;
sub getChildnodes;
sub getData;
sub getFirstChild;
sub getLastChild;
sub getLocalName;
sub getName;
sub getNamespace;
sub getNamespaceURI;
sub getNamespaces;
sub getNextSibling;
sub getOwner;
sub getOwnerDocument;
sub getOwnerElement;
sub getParentNode;
sub getPrefix;
sub getPreviousSibling;
sub getType;
sub getValue;
sub hasAttributes;
sub hasChildNodes;
sub insertAfter;
sub insertBefore;
sub isEqual;
sub isSameNode;
sub lastChild;
sub line_number;
sub localNS;
sub localName;
sub localNamespace;
sub localname;
sub lookupNamespacePrefix;
sub lookupNamespaceURI;
sub namespaceURI;
sub namespaces;
sub nextNonBlankSibling;
sub nextSibling;
sub nodeName;
sub nodePath;
sub nodeType;
sub nodeValue;
sub normalize;
sub ownerDocument;
sub ownerNode;
sub parentNode;
sub prefix;
sub previousNonBlankSibling;
sub previousSibling;
sub removeChild;
sub removeChildNodes;
sub replaceChild;
sub replaceNode;
sub serialize;
sub setBaseURI;
sub setName;
sub setNodeName;
sub setRawName;
sub string_value;
sub textContent;
sub toString;
sub to_literal;
sub to_number;
sub unbindNode;
sub unlink;
sub unlinkNode;
}
package XML::LibXML::PI {
sub _setData;
}
package XML::LibXML::ParserContext {
sub DESTROY;
}
package XML::LibXML::Pattern {
sub DESTROY;
sub _compilePattern;
sub matchesNode;
}
package XML::LibXML::Reader {
sub _DESTROY;
sub _close;
sub _getParserProp;
sub _newForDOM;
sub _newForFd;
sub _newForFile;
sub _newForIO;
sub _newForString;
sub _nodePath;
sub _preservePattern;
sub _setParserProp;
sub _setRelaxNG;
sub _setRelaxNGFile;
sub _setXSD;
sub _setXSDFile;
sub attributeCount;
sub baseURI;
sub byteConsumed;
sub columnNumber;
sub copyCurrentNode;
sub depth;
sub document;
sub encoding;
sub finish;
sub getAttribute;
sub getAttributeHash;
sub getAttributeNo;
sub getAttributeNs;
sub hasAttributes;
sub hasValue;
sub isDefault;
sub isEmptyElement;
sub isNamespaceDecl;
sub isValid;
sub lineNumber;
sub localName;
sub lookupNamespace;
sub matchesPattern;
sub moveToAttribute;
sub moveToAttributeNo;
sub moveToAttributeNs;
sub moveToElement;
sub moveToFirstAttribute;
sub moveToNextAttribute;
sub name;
sub namespaceURI;
sub next;
sub nextElement;
sub nextPatternMatch;
sub nextSibling;
sub nextSiblingElement;
sub nodeType;
sub prefix;
sub preserveNode;
sub quoteChar;
sub read;
sub readAttributeValue;
sub readInnerXml;
sub readOuterXml;
sub readState;
sub skipSiblings;
sub standalone;
sub value;
sub xmlLang;
sub xmlVersion;
}
package XML::LibXML::RegExp {
sub DESTROY;
sub _compile;
sub isDeterministic;
sub matches;
}
package XML::LibXML::RelaxNG {
sub DESTROY;
sub parse_buffer;
sub parse_document;
sub parse_location;
sub validate;
}
package XML::LibXML::Schema {
sub DESTROY;
sub parse_buffer;
sub parse_location;
sub validate;
}
package XML::LibXML::Text {
sub appendData;
sub data;
sub deleteData;
sub insertData;
sub new;
sub replaceData;
sub setData;
sub substringData;
}
package XML::LibXML::XPathContext {
sub DESTROY;
sub _find;
sub _findnodes;
sub _free_node_pool;
sub getContextNode;
sub getContextPosition;
sub getContextSize;
sub getVarLookupData;
sub getVarLookupFunc;
sub lookupNs;
sub new;
sub registerFunctionNS;
sub registerNs;
sub registerVarLookupFunc;
sub setContextNode;
sub setContextPosition;
sub setContextSize;
}
package XML::LibXML::XPathExpression {
sub DESTROY;
sub new;
}
package XML::LibXSLT {
sub HAVE_EXSLT;
sub INIT_THREAD_SUPPORT;
sub LIBXSLT_DOTTED_VERSION;
sub LIBXSLT_RUNTIME_VERSION;
sub LIBXSLT_VERSION;
sub _parse_stylesheet;
sub _parse_stylesheet_file;
sub debug_callback;
sub decodeFromUTF8;
sub encodeToUTF8;
sub lib_cleanup_callbacks;
sub lib_init_callbacks;
sub max_depth;
sub register_function;
sub xinclude_default;
}
package XML::LibXSLT::Stylesheet {
sub DESTROY;
sub _output_string;
sub media_type;
sub output_encoding;
sub output_fh;
sub output_file;
sub output_method;
sub transform;
sub transform_file;
}
package XML::LibXSLT::StylesheetWrapper {
sub decodeFromUTF8;
sub encodeToUTF8;
}
package XML::LibXSLT::TransformContext {
sub stylesheet;
}
package XML::Parser::Expat {
sub DefaultCurrent;
sub Do_External_Parse;
sub ElementIndex;
sub ErrorString;
sub FreeEncoding;
sub GenerateNSName;
sub GetBase;
sub GetCurrentByteIndex;
sub GetCurrentColumnNumber;
sub GetCurrentLineNumber;
sub GetErrorCode;
sub GetSpecifiedAttributeCount;
sub LoadEncoding;
sub OriginalString;
sub ParseDone;
sub ParsePartial;
sub ParseStream;
sub ParseString;
sub ParserCreate;
sub ParserFree;
sub ParserRelease;
sub PositionContext;
sub RecognizedString;
sub SetAttListDeclHandler;
sub SetBase;
sub SetCharacterDataHandler;
sub SetCommentHandler;
sub SetDefaultHandler;
sub SetDoctypeHandler;
sub SetElementDeclHandler;
sub SetEndCdataHandler;
sub SetEndDoctypeHandler;
sub SetEndElementHandler;
sub SetEntityDeclHandler;
sub SetExtEntFinishHandler;
sub SetExternalEntityRefHandler;
sub SetNotationDeclHandler;
sub SetProcessingInstructionHandler;
sub SetStartCdataHandler;
sub SetStartElementHandler;
sub SetUnparsedEntityDeclHandler;
sub SetXMLDeclHandler;
sub SkipUntil;
sub UnsetAllHandlers;
}
package YAML::Syck {
sub DumpJSON;
sub DumpJSONFile;
sub DumpJSONInto;
sub DumpYAML;
sub DumpYAMLFile;
sub DumpYAMLInto;
sub LoadJSON;
sub LoadYAML;
}
package YAML::XS::LibYAML {
sub Dump;
sub Load;
}
package arybase {
sub FETCH;
sub STORE;
}
package arybase::mg {
sub FETCH;
sub STORE;
}
package attributes {
sub _fetch_attrs($) ;
sub _guess_stash($) ;
sub _modify_attrs;
sub reftype($) ;
}
package bytes {
sub chr(_) ;
sub index($$;$) ;
sub length(_) ;
sub ord(_) ;
sub rindex($$;$) ;
sub substr($$;$$) ;
}
package metaclass {
sub blessed($) ;
}
package mro {
sub _nextcan;
sub get_isarev($) ;
sub get_linear_isa($;$) ;
sub get_mro($) ;
sub get_pkg_gen($) ;
sub invalidate_all_method_caches() ;
sub is_universal($) ;
sub method_changed_in($) ;
sub set_mro($$) ;
}
package re {
sub install;
sub is_regexp($) ;
sub regexp_pattern($) ;
sub regmust($) ;
sub regname(;$$) ;
sub regnames(;$) ;
sub regnames_count() ;
}
package threads {
sub DESTROY;
sub _handle;
sub create;
sub detach;
sub equal;
sub error;
sub get_stack_size;
sub is_detached;
sub is_joinable;
sub is_running;
sub join;
sub kill;
sub list;
sub new;
sub object;
sub self;
sub set_stack_size;
sub set_thread_exit_only;
sub tid;
sub wantarray;
sub yield;
}
package threads::shared {
sub _id(\[$@%]) ;
sub _refcnt(\[$@%]) ;
sub bless($;$) ;
sub blessed($) ;
sub cond_broadcast(\[$@%]) ;
sub cond_signal(\[$@%]) ;
sub cond_timedwait(\[$@%]$;\[$@%]) ;
sub cond_wait(\[$@%];\[$@%]) ;
sub is_shared(\[$@%]) ;
sub refaddr($) ;
sub reftype($) ;
sub share(\[$@%]) ;
}
package threads::shared::tie {
sub EXISTS;
sub EXTEND;
sub FIRSTKEY;
sub NEXTKEY;
sub POP;
sub PUSH;
sub SHIFT;
sub STORESIZE;
sub UNSHIFT;
}
package utf8 {
sub decode;
sub downgrade;
sub encode;
sub is_utf8;
sub native_to_unicode;
sub unicode_to_native;
sub upgrade;
sub valid;
}
package version {
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
sub vcmp;
}
package version::vxs {
sub VCMP;
sub _VERSION;
sub boolean;
sub declare;
sub is_alpha;
sub is_qv;
sub new;
sub nomethod;
sub noop;
sub normal;
sub numify;
sub parse;
sub qv;
sub stringify;
}
